
Task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f4  080058f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058fc  080058fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013474  20000014  08005918  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013488  08005918  00023488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a0d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c1c  00000000  00000000  00036a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001280  00000000  00000000  00039670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ca7  00000000  00000000  0003ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee0b  00000000  00000000  0005e6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5b1b  00000000  00000000  0006d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142fd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  00143050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005800 	.word	0x08005800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005800 	.word	0x08005800

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133e0 	.word	0x200133e0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb57 	bl	8000c1c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f85b 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8c3 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(led_green_handler, "LED_green_task",200,NULL,2, &task1_handle);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	2302      	movs	r3, #2
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	22c8      	movs	r2, #200	; 0xc8
 8000584:	4922      	ldr	r1, [pc, #136]	; (8000610 <main+0xac>)
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <main+0xb0>)
 8000588:	f002 fc92 	bl	8002eb0 <xTaskCreate>
 800058c:	61f8      	str	r0, [r7, #28]
        configASSERT(status == pdPASS);
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d009      	beq.n	80005a8 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000598:	f383 8811 	msr	BASEPRI, r3
 800059c:	f3bf 8f6f 	isb	sy
 80005a0:	f3bf 8f4f 	dsb	sy
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e7fe      	b.n	80005a6 <main+0x42>

       status = xTaskCreate(led_orange_handler, "LED_orange_task",200,NULL,2, &task2_handle);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	22c8      	movs	r2, #200	; 0xc8
 80005b6:	4918      	ldr	r1, [pc, #96]	; (8000618 <main+0xb4>)
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0xb8>)
 80005ba:	f002 fc79 	bl	8002eb0 <xTaskCreate>
 80005be:	61f8      	str	r0, [r7, #28]
       configASSERT(status == pdPASS);
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d009      	beq.n	80005da <main+0x76>
 80005c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ca:	f383 8811 	msr	BASEPRI, r3
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f3bf 8f4f 	dsb	sy
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e7fe      	b.n	80005d8 <main+0x74>
       status = xTaskCreate(led_red_handler, "LED_red_task",200,NULL,2, &task3_handle);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	22c8      	movs	r2, #200	; 0xc8
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0xbc>)
 80005e8:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0xc0>)
 80005ea:	f002 fc61 	bl	8002eb0 <xTaskCreate>
 80005ee:	61f8      	str	r0, [r7, #28]
       configASSERT(status == pdPASS);
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d009      	beq.n	800060a <main+0xa6>
 80005f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e7fe      	b.n	8000608 <main+0xa4>

     /*start the scheduler*/
       vTaskStartScheduler();
 800060a:	f002 fe0f 	bl	800322c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0xaa>
 8000610:	08005818 	.word	0x08005818
 8000614:	080009bd 	.word	0x080009bd
 8000618:	08005828 	.word	0x08005828
 800061c:	080009dd 	.word	0x080009dd
 8000620:	08005838 	.word	0x08005838
 8000624:	080009fd 	.word	0x080009fd

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f8da 	bl	80057f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fda7 	bl	8001200 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f9c2 	bl	8000a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f800 	bl	80016e0 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f9ab 	bl	8000a40 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	4ba1      	ldr	r3, [pc, #644]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4aa0      	ldr	r2, [pc, #640]	; (800099c <MX_GPIO_Init+0x2a0>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b9e      	ldr	r3, [pc, #632]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b9a      	ldr	r3, [pc, #616]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a99      	ldr	r2, [pc, #612]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b97      	ldr	r3, [pc, #604]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b93      	ldr	r3, [pc, #588]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a92      	ldr	r2, [pc, #584]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b90      	ldr	r3, [pc, #576]	; (800099c <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b8c      	ldr	r3, [pc, #560]	; (800099c <MX_GPIO_Init+0x2a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a8b      	ldr	r2, [pc, #556]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b89      	ldr	r3, [pc, #548]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b85      	ldr	r3, [pc, #532]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a84      	ldr	r2, [pc, #528]	; (800099c <MX_GPIO_Init+0x2a0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b82      	ldr	r3, [pc, #520]	; (800099c <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b7e      	ldr	r3, [pc, #504]	; (800099c <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a7d      	ldr	r2, [pc, #500]	; (800099c <MX_GPIO_Init+0x2a0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b7b      	ldr	r3, [pc, #492]	; (800099c <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	4878      	ldr	r0, [pc, #480]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 80007c0:	f000 fcea 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	4876      	ldr	r0, [pc, #472]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 80007ca:	f000 fce5 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007d4:	4874      	ldr	r0, [pc, #464]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 80007d6:	f000 fcdf 	bl	8001198 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	486b      	ldr	r0, [pc, #428]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 80007f2:	f000 fb37 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4865      	ldr	r0, [pc, #404]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 800080e:	f000 fb29 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	485d      	ldr	r0, [pc, #372]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 800082e:	f000 fb19 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <MX_GPIO_Init+0x2b0>)
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	485a      	ldr	r0, [pc, #360]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000846:	f000 fb0d 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800085a:	2306      	movs	r3, #6
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4852      	ldr	r0, [pc, #328]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000866:	f000 fafd 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800086a:	23e0      	movs	r3, #224	; 0xe0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	484a      	ldr	r0, [pc, #296]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 8000886:	f000 faed 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088a:	2304      	movs	r3, #4
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4845      	ldr	r0, [pc, #276]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 800089e:	f000 fae1 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b4:	2305      	movs	r3, #5
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	483d      	ldr	r0, [pc, #244]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 80008c0:	f000 fad0 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 80008de:	f000 fac1 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f4:	2306      	movs	r3, #6
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4829      	ldr	r0, [pc, #164]	; (80009a4 <MX_GPIO_Init+0x2a8>)
 8000900:	f000 fab0 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800091a:	f000 faa3 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800091e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000930:	230a      	movs	r3, #10
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	481d      	ldr	r0, [pc, #116]	; (80009b0 <MX_GPIO_Init+0x2b4>)
 800093c:	f000 fa92 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x2ac>)
 8000954:	f000 fa86 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000958:	f44f 7310 	mov.w	r3, #576	; 0x240
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	2312      	movs	r3, #18
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096a:	2304      	movs	r3, #4
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x2b8>)
 8000976:	f000 fa75 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x2bc>)
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x2a4>)
 800098e:	f000 fa69 	bl	8000e64 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	10110000 	.word	0x10110000
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	10120000 	.word	0x10120000

080009bc <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
       HAL_GPIO_TogglePin(GPIOD,LED_GREEN_PIN);
 80009c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <led_green_handler+0x1c>)
 80009ca:	f000 fbfe 	bl	80011ca <HAL_GPIO_TogglePin>
       vTaskDelay(pdMS_TO_TICKS(1000));
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f002 fbf3 	bl	80031bc <vTaskDelay>
       HAL_GPIO_TogglePin(GPIOD,LED_GREEN_PIN);
 80009d6:	e7f5      	b.n	80009c4 <led_green_handler+0x8>
 80009d8:	40020c00 	.word	0x40020c00

080009dc <led_orange_handler>:
	}
}
static void led_orange_handler(void* parameters)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
	  HAL_GPIO_TogglePin(GPIOD,LED_ORANGE_PIN);
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <led_orange_handler+0x1c>)
 80009ea:	f000 fbee 	bl	80011ca <HAL_GPIO_TogglePin>
	  vTaskDelay(pdMS_TO_TICKS(800));
 80009ee:	f44f 7048 	mov.w	r0, #800	; 0x320
 80009f2:	f002 fbe3 	bl	80031bc <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOD,LED_ORANGE_PIN);
 80009f6:	e7f5      	b.n	80009e4 <led_orange_handler+0x8>
 80009f8:	40020c00 	.word	0x40020c00

080009fc <led_red_handler>:
	}
}
static void led_red_handler(void* parameters)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	while(1)
	{
	 HAL_GPIO_TogglePin(GPIOD,LED_RED_PIN);
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <led_red_handler+0x1c>)
 8000a0a:	f000 fbde 	bl	80011ca <HAL_GPIO_TogglePin>
	 vTaskDelay(pdMS_TO_TICKS(400));
 8000a0e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a12:	f002 fbd3 	bl	80031bc <vTaskDelay>
	 HAL_GPIO_TogglePin(GPIOD,LED_RED_PIN);
 8000a16:	e7f5      	b.n	8000a04 <led_red_handler+0x8>
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2e:	f000 f917 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40001000 	.word	0x40001000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f9b3 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2036      	movs	r0, #54	; 0x36
 8000ab6:	f000 f9ab 	bl	8000e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aba:	2036      	movs	r0, #54	; 0x36
 8000abc:	f000 f9c4 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_InitTick+0xa4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_InitTick+0xa4>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_InitTick+0xa4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 ffd8 	bl	8001a9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000aec:	f000 ffc2 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8000af0:	4603      	mov	r3, r0
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <HAL_InitTick+0xa8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_InitTick+0xac>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <HAL_InitTick+0xb0>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_InitTick+0xac>)
 8000b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_InitTick+0xac>)
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_InitTick+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_InitTick+0xac>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <HAL_InitTick+0xac>)
 8000b26:	f000 ffeb 	bl	8001b00 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_InitTick+0xac>)
 8000b32:	f001 f81a 	bl	8001b6a <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	2001335c 	.word	0x2001335c
 8000b50:	40001000 	.word	0x40001000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM6_DAC_IRQHandler+0x10>)
 8000b8e:	f001 f810 	bl	8001bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2001335c 	.word	0x2001335c

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <SystemInit+0x28>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <SystemInit+0x28>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SystemInit+0x28>)
 8000bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bce:	e003      	b.n	8000bd8 <LoopCopyDataInit>

08000bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bd6:	3104      	adds	r1, #4

08000bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be0:	d3f6      	bcc.n	8000bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be4:	e002      	b.n	8000bec <LoopFillZerobss>

08000be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000be8:	f842 3b04 	str.w	r3, [r2], #4

08000bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf0:	d3f9      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ffd3 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 fdbd 	bl	8005774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcb3 	bl	8000564 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c04:	08005904 	.word	0x08005904
  ldr  r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c0c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000c10:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000c14:	20013488 	.word	0x20013488

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff28 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fefe 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	2001339c 	.word	0x2001339c

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	2001339c 	.word	0x2001339c

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e16b      	b.n	8001158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 815a 	bne.w	8001152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00b      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0xfc>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80b4 	beq.w	8001152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <HAL_GPIO_Init+0x308>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a5e      	ldr	r2, [pc, #376]	; (800116c <HAL_GPIO_Init+0x308>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <HAL_GPIO_Init+0x308>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a5a      	ldr	r2, [pc, #360]	; (8001170 <HAL_GPIO_Init+0x30c>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a51      	ldr	r2, [pc, #324]	; (8001174 <HAL_GPIO_Init+0x310>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a50      	ldr	r2, [pc, #320]	; (8001178 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4f      	ldr	r2, [pc, #316]	; (800117c <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x216>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_GPIO_Init+0x324>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4b      	ldr	r2, [pc, #300]	; (800118c <HAL_GPIO_Init+0x328>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <HAL_GPIO_Init+0x32c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x20a>
 800106a:	2307      	movs	r3, #7
 800106c:	e00e      	b.n	800108c <HAL_GPIO_Init+0x228>
 800106e:	2308      	movs	r3, #8
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001072:	2306      	movs	r3, #6
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x228>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4934      	ldr	r1, [pc, #208]	; (8001170 <HAL_GPIO_Init+0x30c>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_GPIO_Init+0x330>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <HAL_GPIO_Init+0x330>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x330>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x330>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_GPIO_Init+0x330>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x330>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x330>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x330>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae90 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	3724      	adds	r7, #36	; 0x24
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40021400 	.word	0x40021400
 800118c:	40021800 	.word	0x40021800
 8001190:	40021c00 	.word	0x40021c00
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	401a      	ands	r2, r3
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d104      	bne.n	80011ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e25b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e236      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b91      	ldr	r3, [pc, #580]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a90      	ldr	r2, [pc, #576]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8a      	ldr	r2, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b88      	ldr	r3, [pc, #544]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a87      	ldr	r2, [pc, #540]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a83      	ldr	r2, [pc, #524]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a80      	ldr	r2, [pc, #512]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fce6 	bl	8000c88 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fce2 	bl	8000c88 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1fb      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcd2 	bl	8000c88 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcce 	bl	8000c88 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1e7      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1bb      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4952      	ldr	r1, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <HAL_RCC_OscConfig+0x2b0>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc87 	bl	8000c88 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc83 	bl	8000c88 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e19c      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4940      	ldr	r1, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_RCC_OscConfig+0x2b0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc66 	bl	8000c88 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc62 	bl	8000c88 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e17b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d030      	beq.n	800144c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x2b4>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc46 	bl	8000c88 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc42 	bl	8000c88 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e15b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e015      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x2b4>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc2f 	bl	8000c88 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc2b 	bl	8000c88 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e144      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a0 	beq.w	800159a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d121      	bne.n	80014da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbf1 	bl	8000c88 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e011      	b.n	80014ce <HAL_RCC_OscConfig+0x2ce>
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	42470000 	.word	0x42470000
 80014b4:	42470e80 	.word	0x42470e80
 80014b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff fbe4 	bl	8000c88 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0fd      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 80014e2:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a7c      	ldr	r2, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	e01c      	b.n	800152a <HAL_RCC_OscConfig+0x32a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x312>
 80014f8:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a76      	ldr	r2, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x32a>
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a70      	ldr	r2, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fba9 	bl	8000c88 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fba5 	bl	8000c88 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0bc      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x33a>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fb93 	bl	8000c88 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fb8f 	bl	8000c88 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0a6      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a51      	ldr	r2, [pc, #324]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8092 	beq.w	80016c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d05c      	beq.n	800166a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d141      	bne.n	800163c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb63 	bl	8000c88 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fb5f 	bl	8000c88 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e078      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	061b      	lsls	r3, r3, #24
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb38 	bl	8000c88 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb34 	bl	8000c88 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04d      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x41c>
 800163a:	e045      	b.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb21 	bl	8000c88 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb1d 	bl	8000c88 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e036      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x44a>
 8001668:	e02e      	b.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e029      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	429a      	cmp	r2, r3
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d115      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169e:	4013      	ands	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40007000 	.word	0x40007000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470060 	.word	0x42470060

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa5a 	bl	8000c88 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa56 	bl	8000c88 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4601      	mov	r1, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	fa21 f303 	lsr.w	r3, r1, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f90a 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	080058d0 	.word	0x080058d0
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d007      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x32>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d008      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x38>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80b4 	bne.w	8001a40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018da:	60bb      	str	r3, [r7, #8]
       break;
 80018dc:	e0b3      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e0b0      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04a      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	ea03 0501 	and.w	r5, r3, r1
 8001910:	ea04 0602 	and.w	r6, r4, r2
 8001914:	4629      	mov	r1, r5
 8001916:	4632      	mov	r2, r6
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f04f 0400 	mov.w	r4, #0
 8001920:	0154      	lsls	r4, r2, #5
 8001922:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001926:	014b      	lsls	r3, r1, #5
 8001928:	4619      	mov	r1, r3
 800192a:	4622      	mov	r2, r4
 800192c:	1b49      	subs	r1, r1, r5
 800192e:	eb62 0206 	sbc.w	r2, r2, r6
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f04f 0400 	mov.w	r4, #0
 800193a:	0194      	lsls	r4, r2, #6
 800193c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001940:	018b      	lsls	r3, r1, #6
 8001942:	1a5b      	subs	r3, r3, r1
 8001944:	eb64 0402 	sbc.w	r4, r4, r2
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	00e2      	lsls	r2, r4, #3
 8001952:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001956:	00d9      	lsls	r1, r3, #3
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	195b      	adds	r3, r3, r5
 800195e:	eb44 0406 	adc.w	r4, r4, r6
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	0262      	lsls	r2, r4, #9
 800196c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001970:	0259      	lsls	r1, r3, #9
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	4618      	mov	r0, r3
 8001978:	4621      	mov	r1, r4
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f04f 0400 	mov.w	r4, #0
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	f7fe fc6e 	bl	8000264 <__aeabi_uldivmod>
 8001988:	4603      	mov	r3, r0
 800198a:	460c      	mov	r4, r1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e049      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	f04f 0400 	mov.w	r4, #0
 800199a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	ea03 0501 	and.w	r5, r3, r1
 80019a6:	ea04 0602 	and.w	r6, r4, r2
 80019aa:	4629      	mov	r1, r5
 80019ac:	4632      	mov	r2, r6
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	f04f 0400 	mov.w	r4, #0
 80019b6:	0154      	lsls	r4, r2, #5
 80019b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019bc:	014b      	lsls	r3, r1, #5
 80019be:	4619      	mov	r1, r3
 80019c0:	4622      	mov	r2, r4
 80019c2:	1b49      	subs	r1, r1, r5
 80019c4:	eb62 0206 	sbc.w	r2, r2, r6
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	f04f 0400 	mov.w	r4, #0
 80019d0:	0194      	lsls	r4, r2, #6
 80019d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	1a5b      	subs	r3, r3, r1
 80019da:	eb64 0402 	sbc.w	r4, r4, r2
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	00e2      	lsls	r2, r4, #3
 80019e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ec:	00d9      	lsls	r1, r3, #3
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	195b      	adds	r3, r3, r5
 80019f4:	eb44 0406 	adc.w	r4, r4, r6
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	02a2      	lsls	r2, r4, #10
 8001a02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a06:	0299      	lsls	r1, r3, #10
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4621      	mov	r1, r4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4623      	mov	r3, r4
 8001a1a:	f7fe fc23 	bl	8000264 <__aeabi_uldivmod>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0c1b      	lsrs	r3, r3, #16
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
      break;
 8001a3e:	e002      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a42:	60bb      	str	r3, [r7, #8]
      break;
 8001a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a46:	68bb      	ldr	r3, [r7, #8]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	080058e0 	.word	0x080058e0

08001a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RCC_GetClockConfig+0x60>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 020f 	and.w	r2, r3, #15
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e01d      	b.n	8001b4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f815 	bl	8001b56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 f968 	bl	8001e14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d007      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d122      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d11b      	bne.n	8001c0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f06f 0202 	mvn.w	r2, #2
 8001bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8ee 	bl	8001dd6 <HAL_TIM_IC_CaptureCallback>
 8001bfa:	e005      	b.n	8001c08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8e0 	bl	8001dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8f1 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d122      	bne.n	8001c62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d11b      	bne.n	8001c62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0204 	mvn.w	r2, #4
 8001c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8c4 	bl	8001dd6 <HAL_TIM_IC_CaptureCallback>
 8001c4e:	e005      	b.n	8001c5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8b6 	bl	8001dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8c7 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d122      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0208 	mvn.w	r2, #8
 8001c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f89a 	bl	8001dd6 <HAL_TIM_IC_CaptureCallback>
 8001ca2:	e005      	b.n	8001cb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f88c 	bl	8001dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f89d 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d122      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d11b      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0210 	mvn.w	r2, #16
 8001cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2208      	movs	r2, #8
 8001ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f870 	bl	8001dd6 <HAL_TIM_IC_CaptureCallback>
 8001cf6:	e005      	b.n	8001d04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f862 	bl	8001dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f873 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10e      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0201 	mvn.w	r2, #1
 8001d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fe73 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d10e      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d107      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f903 	bl	8001f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f838 	bl	8001dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d10e      	bne.n	8001dba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d107      	bne.n	8001dba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0220 	mvn.w	r2, #32
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8cd 	bl	8001f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <TIM_Base_SetConfig+0x114>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e32:	d00f      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <TIM_Base_SetConfig+0x118>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00b      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <TIM_Base_SetConfig+0x11c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3b      	ldr	r2, [pc, #236]	; (8001f34 <TIM_Base_SetConfig+0x120>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <TIM_Base_SetConfig+0x124>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <TIM_Base_SetConfig+0x114>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d027      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <TIM_Base_SetConfig+0x118>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d023      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <TIM_Base_SetConfig+0x11c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01f      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <TIM_Base_SetConfig+0x120>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <TIM_Base_SetConfig+0x124>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d017      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <TIM_Base_SetConfig+0x128>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <TIM_Base_SetConfig+0x12c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00f      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <TIM_Base_SetConfig+0x130>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <TIM_Base_SetConfig+0x134>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <TIM_Base_SetConfig+0x138>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <TIM_Base_SetConfig+0x13c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <TIM_Base_SetConfig+0x114>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d003      	beq.n	8001f0c <TIM_Base_SetConfig+0xf8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <TIM_Base_SetConfig+0x124>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d103      	bne.n	8001f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	615a      	str	r2, [r3, #20]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40000c00 	.word	0x40000c00
 8001f38:	40010400 	.word	0x40010400
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800
 8001f48:	40001800 	.word	0x40001800
 8001f4c:	40001c00 	.word	0x40001c00
 8001f50:	40002000 	.word	0x40002000

08001f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3b04      	subs	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f023 0201 	bic.w	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3b04      	subs	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <pxPortInitialiseStack+0x64>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3b14      	subs	r3, #20
 8001fb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3b04      	subs	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f06f 0202 	mvn.w	r2, #2
 8001fca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b20      	subs	r3, #32
 8001fd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	08001fe5 	.word	0x08001fe5

08001fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <prvTaskExitError+0x50>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d009      	beq.n	800200c <prvTaskExitError+0x28>
 8001ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e7fe      	b.n	800200a <prvTaskExitError+0x26>
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800201e:	bf00      	nop
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0fc      	beq.n	8002020 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c
	...

08002040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <pxCurrentTCBConst2>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	6808      	ldr	r0, [r1, #0]
 8002046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800204a:	f380 8809 	msr	PSP, r0
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8811 	msr	BASEPRI, r0
 800205a:	4770      	bx	lr
 800205c:	f3af 8000 	nop.w

08002060 <pxCurrentTCBConst2>:
 8002060:	20012c54 	.word	0x20012c54
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop

08002068 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002068:	4808      	ldr	r0, [pc, #32]	; (800208c <prvPortStartFirstTask+0x24>)
 800206a:	6800      	ldr	r0, [r0, #0]
 800206c:	6800      	ldr	r0, [r0, #0]
 800206e:	f380 8808 	msr	MSP, r0
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f380 8814 	msr	CONTROL, r0
 800207a:	b662      	cpsie	i
 800207c:	b661      	cpsie	f
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	df00      	svc	0
 8002088:	bf00      	nop
 800208a:	0000      	.short	0x0000
 800208c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop

08002094 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800209a:	4b44      	ldr	r3, [pc, #272]	; (80021ac <xPortStartScheduler+0x118>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <xPortStartScheduler+0x11c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d109      	bne.n	80020b8 <xPortStartScheduler+0x24>
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	e7fe      	b.n	80020b6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <xPortStartScheduler+0x118>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <xPortStartScheduler+0x120>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d109      	bne.n	80020d6 <xPortStartScheduler+0x42>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e7fe      	b.n	80020d4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <xPortStartScheduler+0x124>)
 80020d8:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <xPortStartScheduler+0x128>)
 80020fc:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <xPortStartScheduler+0x12c>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002104:	e009      	b.n	800211a <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <xPortStartScheduler+0x12c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <xPortStartScheduler+0x12c>)
 800210e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b80      	cmp	r3, #128	; 0x80
 8002124:	d0ef      	beq.n	8002106 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <xPortStartScheduler+0x12c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	d009      	beq.n	8002146 <xPortStartScheduler+0xb2>
 8002132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	e7fe      	b.n	8002144 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <xPortStartScheduler+0x12c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <xPortStartScheduler+0x12c>)
 800214e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <xPortStartScheduler+0x12c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <xPortStartScheduler+0x12c>)
 800215a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <xPortStartScheduler+0x130>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <xPortStartScheduler+0x130>)
 800216a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <xPortStartScheduler+0x130>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <xPortStartScheduler+0x130>)
 8002176:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800217a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800217c:	f000 f8d4 	bl	8002328 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <xPortStartScheduler+0x134>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002186:	f000 f8f3 	bl	8002370 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <xPortStartScheduler+0x138>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <xPortStartScheduler+0x138>)
 8002190:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002194:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002196:	f7ff ff67 	bl	8002068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800219a:	f001 fadd 	bl	8003758 <vTaskSwitchContext>
    prvTaskExitError();
 800219e:	f7ff ff21 	bl	8001fe4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	410fc271 	.word	0x410fc271
 80021b4:	410fc270 	.word	0x410fc270
 80021b8:	e000e400 	.word	0xe000e400
 80021bc:	20000030 	.word	0x20000030
 80021c0:	20000034 	.word	0x20000034
 80021c4:	e000ed20 	.word	0xe000ed20
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	e000ef34 	.word	0xe000ef34

080021d0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <vPortEnterCritical+0x54>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <vPortEnterCritical+0x54>)
 80021f0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <vPortEnterCritical+0x54>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <vPortEnterCritical+0x58>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <vPortEnterCritical+0x48>
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	e7fe      	b.n	8002216 <vPortEnterCritical+0x46>
    }
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	2000000c 	.word	0x2000000c
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <vPortExitCritical+0x4c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <vPortExitCritical+0x22>
 800223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	e7fe      	b.n	800224c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <vPortExitCritical+0x4c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <vPortExitCritical+0x4c>)
 8002256:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <vPortExitCritical+0x4c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <vPortExitCritical+0x3e>
 8002260:	2300      	movs	r3, #0
 8002262:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c
 800227c:	00000000 	.word	0x00000000

08002280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002280:	f3ef 8009 	mrs	r0, PSP
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <pxCurrentTCBConst>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f01e 0f10 	tst.w	lr, #16
 8002290:	bf08      	it	eq
 8002292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800229a:	6010      	str	r0, [r2, #0]
 800229c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80022a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80022a4:	f380 8811 	msr	BASEPRI, r0
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f001 fa52 	bl	8003758 <vTaskSwitchContext>
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	f380 8811 	msr	BASEPRI, r0
 80022bc:	bc09      	pop	{r0, r3}
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	6808      	ldr	r0, [r1, #0]
 80022c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c6:	f01e 0f10 	tst.w	lr, #16
 80022ca:	bf08      	it	eq
 80022cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80022d0:	f380 8809 	msr	PSP, r0
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	f3af 8000 	nop.w

080022e0 <pxCurrentTCBConst>:
 80022e0:	20012c54 	.word	0x20012c54
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop

080022e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
        __asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002300:	f001 f910 	bl	8003524 <xTaskIncrementTick>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SysTick_Handler+0x3c>)
 800230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	e000ed04 	.word	0xe000ed04

08002328 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <vPortSetupTimerInterrupt+0x34>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <vPortSetupTimerInterrupt+0x38>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <vPortSetupTimerInterrupt+0x3c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <vPortSetupTimerInterrupt+0x40>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <vPortSetupTimerInterrupt+0x44>)
 8002346:	3b01      	subs	r3, #1
 8002348:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <vPortSetupTimerInterrupt+0x34>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010
 8002360:	e000e018 	.word	0xe000e018
 8002364:	20000000 	.word	0x20000000
 8002368:	10624dd3 	.word	0x10624dd3
 800236c:	e000e014 	.word	0xe000e014

08002370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002380 <vPortEnableVFP+0x10>
 8002374:	6801      	ldr	r1, [r0, #0]
 8002376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800237a:	6001      	str	r1, [r0, #0]
 800237c:	4770      	bx	lr
 800237e:	0000      	.short	0x0000
 8002380:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop

08002388 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002394:	f000 ffaa 	bl	80032ec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <pvPortMalloc+0x15c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80023a0:	f000 f904 	bl	80025ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80023aa:	2208      	movs	r2, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	3308      	adds	r3, #8
 80023b6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d804      	bhi.n	80023cc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	e001      	b.n	80023d0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db6f      	blt.n	80024b6 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d06c      	beq.n	80024b6 <pvPortMalloc+0x12e>
 80023dc:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <pvPortMalloc+0x160>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d867      	bhi.n	80024b6 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <pvPortMalloc+0x164>)
 80023e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <pvPortMalloc+0x164>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023f0:	e004      	b.n	80023fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d903      	bls.n	800240e <pvPortMalloc+0x86>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f1      	bne.n	80023f2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800240e:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <pvPortMalloc+0x15c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	429a      	cmp	r2, r3
 8002416:	d04e      	beq.n	80024b6 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2208      	movs	r2, #8
 800241e:	4413      	add	r3, r2
 8002420:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	2308      	movs	r3, #8
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	429a      	cmp	r2, r3
 8002438:	d91e      	bls.n	8002478 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <pvPortMalloc+0xd8>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	e7fe      	b.n	800245e <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f000 f8f6 	bl	8002664 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <pvPortMalloc+0x160>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <pvPortMalloc+0x160>)
 8002484:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <pvPortMalloc+0x160>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <pvPortMalloc+0x168>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d203      	bcs.n	800249a <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <pvPortMalloc+0x160>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <pvPortMalloc+0x168>)
 8002498:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <pvPortMalloc+0x16c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <pvPortMalloc+0x16c>)
 80024b4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80024b6:	f000 ff27 	bl	8003308 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <pvPortMalloc+0x150>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e7fe      	b.n	80024d6 <pvPortMalloc+0x14e>
    return pvReturn;
 80024d8:	69fb      	ldr	r3, [r7, #28]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20012c40 	.word	0x20012c40
 80024e8:	20012c44 	.word	0x20012c44
 80024ec:	20012c38 	.word	0x20012c38
 80024f0:	20012c48 	.word	0x20012c48
 80024f4:	20012c4c 	.word	0x20012c4c

080024f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d047      	beq.n	800259a <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800250a:	2308      	movs	r3, #8
 800250c:	425b      	negs	r3, r3
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db09      	blt.n	8002534 <vPortFree+0x3c>
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	e7fe      	b.n	8002532 <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <vPortFree+0x58>
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	e7fe      	b.n	800254e <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0fdb      	lsrs	r3, r3, #31
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d118      	bne.n	800259a <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002574:	f000 feba 	bl	80032ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <vPortFree+0xac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4413      	add	r3, r2
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <vPortFree+0xac>)
 8002584:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002586:	6938      	ldr	r0, [r7, #16]
 8002588:	f000 f86c 	bl	8002664 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <vPortFree+0xb0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <vPortFree+0xb0>)
 8002594:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002596:	f000 feb7 	bl	8003308 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20012c44 	.word	0x20012c44
 80025a8:	20012c50 	.word	0x20012c50

080025ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025b2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <prvHeapInit+0xa4>)
 80025ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3307      	adds	r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <prvHeapInit+0xa4>)
 80025dc:	4413      	add	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <prvHeapInit+0xa8>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <prvHeapInit+0xa8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80025f8:	2208      	movs	r2, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0307 	bic.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <prvHeapInit+0xac>)
 800260c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <prvHeapInit+0xac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <prvHeapInit+0xac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <prvHeapInit+0xac>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <prvHeapInit+0xb0>)
 800263a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <prvHeapInit+0xb4>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	20000038 	.word	0x20000038
 8002654:	20012c38 	.word	0x20012c38
 8002658:	20012c40 	.word	0x20012c40
 800265c:	20012c48 	.word	0x20012c48
 8002660:	20012c44 	.word	0x20012c44

08002664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <prvInsertBlockIntoFreeList+0xac>)
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e002      	b.n	8002678 <prvInsertBlockIntoFreeList+0x14>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d8f7      	bhi.n	8002672 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	d108      	bne.n	80026a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	441a      	add	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d118      	bne.n	80026ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <prvInsertBlockIntoFreeList+0xb0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d00d      	beq.n	80026e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e008      	b.n	80026f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <prvInsertBlockIntoFreeList+0xb0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e003      	b.n	80026f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d002      	beq.n	8002702 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20012c38 	.word	0x20012c38
 8002714:	20012c40 	.word	0x20012c40

08002718 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f103 0208 	add.w	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f103 0208 	add.w	r2, r3, #8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f103 0208 	add.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d103      	bne.n	8002792 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e00c      	b.n	80027ac <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3308      	adds	r3, #8
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e002      	b.n	80027a0 <vListInsert+0x2e>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d2f6      	bcs.n	800279a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6892      	ldr	r2, [r2, #8]
 80027fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6852      	ldr	r2, [r2, #4]
 8002804:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d103      	bne.n	8002818 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002842:	2301      	movs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <xQueueGenericReset+0x2c>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e7fe      	b.n	8002862 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800286e:	2b00      	cmp	r3, #0
 8002870:	d05f      	beq.n	8002932 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	2000      	movs	r0, #0
 800287c:	fba2 1203 	umull	r1, r2, r2, r3
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	f04f 0400 	mov.w	r4, #0
 8002888:	0013      	movs	r3, r2
 800288a:	2400      	movs	r4, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d000      	beq.n	8002892 <xQueueGenericReset+0x5a>
 8002890:	2001      	movs	r0, #1
 8002892:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d14c      	bne.n	8002932 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002898:	f7ff fc9a 	bl	80021d0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	441a      	add	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2200      	movs	r2, #0
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	3b01      	subs	r3, #1
 80028ca:	6939      	ldr	r1, [r7, #16]
 80028cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	441a      	add	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	22ff      	movs	r2, #255	; 0xff
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d114      	bne.n	8002918 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01a      	beq.n	800292c <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	3310      	adds	r3, #16
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f800 	bl	8003900 <xTaskRemoveFromEventList>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <xQueueGenericReset+0x124>)
 8002908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	e009      	b.n	800292c <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3310      	adds	r3, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fefb 	bl	8002718 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3324      	adds	r3, #36	; 0x24
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fef6 	bl	8002718 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800292c:	f7ff fc7e 	bl	800222c <vPortExitCritical>
 8002930:	e001      	b.n	8002936 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <xQueueGenericReset+0x118>
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e7fe      	b.n	800294e <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002950:	697b      	ldr	r3, [r7, #20]
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d034      	beq.n	80029e2 <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002978:	2000      	movs	r0, #0
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	fba2 1203 	umull	r1, r2, r2, r3
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0013      	movs	r3, r2
 800298c:	2400      	movs	r4, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d000      	beq.n	8002994 <xQueueGenericCreate+0x34>
 8002992:	2001      	movs	r0, #1
 8002994:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d123      	bne.n	80029e2 <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80029a6:	d81c      	bhi.n	80029e2 <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fce6 	bl	8002388 <pvPortMalloc>
 80029bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3350      	adds	r3, #80	; 0x50
 80029cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f813 	bl	8002a06 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80029e0:	e00c      	b.n	80029fc <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <xQueueGenericCreate+0x9c>
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e7fe      	b.n	80029fa <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029fc:	69fb      	ldr	r3, [r7, #28]
    }
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}

08002a06 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e002      	b.n	8002a28 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a34:	2101      	movs	r1, #1
 8002a36:	69b8      	ldr	r0, [r7, #24]
 8002a38:	f7ff fefe 	bl	8002838 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	2073      	movs	r0, #115	; 0x73
 8002a4c:	f002 f8be 	bl	8004bcc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b08f      	sub	sp, #60	; 0x3c
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <xQueueReceive+0x2e>
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	e7fe      	b.n	8002a84 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <xQueueReceive+0x3c>
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueReceive+0x40>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueReceive+0x42>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <xQueueReceive+0x5a>
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab2:	f001 f933 	bl	8003d1c <xTaskGetSchedulerState>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <xQueueReceive+0x6a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <xQueueReceive+0x6e>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueReceive+0x70>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <xQueueReceive+0x88>
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	e7fe      	b.n	8002ade <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ae0:	f7ff fb76 	bl	80021d0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d031      	beq.n	8002b54 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af4:	f000 f8c4 	bl	8002c80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 fcf2 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002b00:	4604      	mov	r4, r0
 8002b02:	2000      	movs	r0, #0
 8002b04:	f002 fcee 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	460a      	mov	r2, r1
 8002b14:	4621      	mov	r1, r4
 8002b16:	205c      	movs	r0, #92	; 0x5c
 8002b18:	f002 f8ce 	bl	8004cb8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00f      	beq.n	8002b4c <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	3310      	adds	r3, #16
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fee5 	bl	8003900 <xTaskRemoveFromEventList>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <xQueueReceive+0x224>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b4c:	f7ff fb6e 	bl	800222c <vPortExitCritical>
                return pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e08e      	b.n	8002c72 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b5a:	f7ff fb67 	bl	800222c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fcbf 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002b66:	4604      	mov	r4, r0
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f002 fcbb 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	460a      	mov	r2, r1
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	205c      	movs	r0, #92	; 0x5c
 8002b7e:	f002 f89b 	bl	8004cb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e075      	b.n	8002c72 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 ff8d 	bl	8003ab0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b9a:	f7ff fb47 	bl	800222c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b9e:	f000 fba5 	bl	80032ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ba2:	f7ff fb15 	bl	80021d0 <vPortEnterCritical>
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d103      	bne.n	8002bbc <xQueueReceive+0x164>
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d103      	bne.n	8002bd2 <xQueueReceive+0x17a>
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd2:	f7ff fb2b 	bl	800222c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bd6:	1d3a      	adds	r2, r7, #4
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 ff7c 	bl	8003adc <xTaskCheckForTimeOut>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d124      	bne.n	8002c34 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bec:	f000 f8c0 	bl	8002d70 <prvIsQueueEmpty>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d018      	beq.n	8002c28 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fe12 	bl	8003828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c06:	f000 f861 	bl	8002ccc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c0a:	f000 fb7d 	bl	8003308 <xTaskResumeAll>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f47f af65 	bne.w	8002ae0 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <xQueueReceive+0x224>)
 8002c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	e75b      	b.n	8002ae0 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c2a:	f000 f84f 	bl	8002ccc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c2e:	f000 fb6b 	bl	8003308 <xTaskResumeAll>
 8002c32:	e755      	b.n	8002ae0 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 f849 	bl	8002ccc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c3a:	f000 fb65 	bl	8003308 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c40:	f000 f896 	bl	8002d70 <prvIsQueueEmpty>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f43f af4a 	beq.w	8002ae0 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fc48 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002c54:	4604      	mov	r4, r0
 8002c56:	2000      	movs	r0, #0
 8002c58:	f002 fc44 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	2301      	movs	r3, #1
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	460a      	mov	r2, r1
 8002c68:	4621      	mov	r1, r4
 8002c6a:	205c      	movs	r0, #92	; 0x5c
 8002c6c:	f002 f824 	bl	8004cb8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3734      	adds	r7, #52	; 0x34
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d018      	beq.n	8002cc4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d303      	bcc.n	8002cb4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68d9      	ldr	r1, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6838      	ldr	r0, [r7, #0]
 8002cc0:	f002 fd8b 	bl	80057da <memcpy>
    }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cd4:	f7ff fa7c 	bl	80021d0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cde:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ce0:	e011      	b.n	8002d06 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3324      	adds	r3, #36	; 0x24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fe06 	bl	8003900 <xTaskRemoveFromEventList>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002cfa:	f000 ff53 	bl	8003ba4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	dce9      	bgt.n	8002ce2 <prvUnlockQueue+0x16>
 8002d0e:	e000      	b.n	8002d12 <prvUnlockQueue+0x46>
                    break;
 8002d10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d1a:	f7ff fa87 	bl	800222c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d1e:	f7ff fa57 	bl	80021d0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	e011      	b.n	8002d50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d012      	beq.n	8002d5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fde1 	bl	8003900 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d44:	f000 ff2e 	bl	8003ba4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d48:	7bbb      	ldrb	r3, [r7, #14]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dce9      	bgt.n	8002d2c <prvUnlockQueue+0x60>
 8002d58:	e000      	b.n	8002d5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	22ff      	movs	r2, #255	; 0xff
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d64:	f7ff fa62 	bl	800222c <vPortExitCritical>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d78:	f7ff fa2a 	bl	80021d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e001      	b.n	8002d8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d8e:	f7ff fa4d 	bl	800222c <vPortExitCritical>

    return xReturn;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <vQueueAddToRegistry+0x28>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e7fe      	b.n	8002dc2 <vQueueAddToRegistry+0x26>

        if( pcQueueName != NULL )
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d024      	beq.n	8002e14 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e01e      	b.n	8002e0e <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <vQueueAddToRegistry+0xa8>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d105      	bne.n	8002dec <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <vQueueAddToRegistry+0xa8>)
 8002de6:	4413      	add	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
                    break;
 8002dea:	e013      	b.n	8002e14 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <vQueueAddToRegistry+0x6c>
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <vQueueAddToRegistry+0xa8>)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <vQueueAddToRegistry+0xa8>)
 8002e04:	4413      	add	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b07      	cmp	r3, #7
 8002e12:	d9dd      	bls.n	8002dd0 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fb5b 	bl	80054e4 <SEGGER_SYSVIEW_ShrinkId>
 8002e2e:	4601      	mov	r1, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	2071      	movs	r0, #113	; 0x71
 8002e36:	f001 fe6f 	bl	8004b18 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200133a0 	.word	0x200133a0

08002e48 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e58:	f7ff f9ba 	bl	80021d0 <vPortEnterCritical>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <vQueueWaitForMessageRestricted+0x2a>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <vQueueWaitForMessageRestricted+0x40>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e88:	f7ff f9d0 	bl	800222c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fce7 	bl	8003870 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff12 	bl	8002ccc <prvUnlockQueue>
    }
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fa5f 	bl	8002388 <pvPortMalloc>
 8002eca:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ed2:	2058      	movs	r0, #88	; 0x58
 8002ed4:	f7ff fa58 	bl	8002388 <pvPortMalloc>
 8002ed8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ee0:	2258      	movs	r2, #88	; 0x58
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	69f8      	ldr	r0, [r7, #28]
 8002ee6:	f002 fc83 	bl	80057f0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef0:	e005      	b.n	8002efe <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff fb00 	bl	80024f8 <vPortFree>
 8002ef8:	e001      	b.n	8002efe <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f80e 	bl	8002f3c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f20:	69f8      	ldr	r0, [r7, #28]
 8002f22:	f000 f897 	bl	8003054 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	e002      	b.n	8002f32 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f32:	69bb      	ldr	r3, [r7, #24]
    }
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	21a5      	movs	r1, #165	; 0xa5
 8002f56:	f002 fc4b 	bl	80057f0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f64:	3b01      	subs	r3, #1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <prvInitialiseNewTask+0x56>
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e7fe      	b.n	8002f90 <prvInitialiseNewTask+0x54>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01e      	beq.n	8002fd6 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e012      	b.n	8002fc4 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	7819      	ldrb	r1, [r3, #0]
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	3334      	adds	r3, #52	; 0x34
 8002fae:	460a      	mov	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	d9e9      	bls.n	8002f9e <prvInitialiseNewTask+0x62>
 8002fca:	e000      	b.n	8002fce <prvInitialiseNewTask+0x92>
            {
                break;
 8002fcc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d909      	bls.n	8002ff0 <prvInitialiseNewTask+0xb4>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e7fe      	b.n	8002fee <prvInitialiseNewTask+0xb2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d901      	bls.n	8002ffa <prvInitialiseNewTask+0xbe>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003004:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fba4 	bl	8002758 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fb9f 	bl	8002758 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	f1c3 0205 	rsb	r2, r3, #5
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	69b8      	ldr	r0, [r7, #24]
 8003036:	f7fe ffa1 	bl	8001f7c <pxPortInitialiseStack>
 800303a:	4602      	mov	r2, r0
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <prvInitialiseNewTask+0x110>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af02      	add	r7, sp, #8
 800305a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800305c:	f7ff f8b8 	bl	80021d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <prvAddNewTaskToReadyList+0x14c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a4e      	ldr	r2, [pc, #312]	; (80031a0 <prvAddNewTaskToReadyList+0x14c>)
 8003068:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800306a:	4b4e      	ldr	r3, [pc, #312]	; (80031a4 <prvAddNewTaskToReadyList+0x150>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003072:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <prvAddNewTaskToReadyList+0x150>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <prvAddNewTaskToReadyList+0x14c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d110      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003080:	f000 fdb4 	bl	8003bec <prvInitialiseTaskLists>
 8003084:	e00d      	b.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <prvAddNewTaskToReadyList+0x154>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <prvAddNewTaskToReadyList+0x150>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	429a      	cmp	r2, r3
 800309a:	d802      	bhi.n	80030a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800309c:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <prvAddNewTaskToReadyList+0x150>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030a2:	4b42      	ldr	r3, [pc, #264]	; (80031ac <prvAddNewTaskToReadyList+0x158>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4a40      	ldr	r2, [pc, #256]	; (80031ac <prvAddNewTaskToReadyList+0x158>)
 80030aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <prvAddNewTaskToReadyList+0x158>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <prvAddNewTaskToReadyList+0x94>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f002 f94b 	bl	8005358 <SEGGER_SYSVIEW_OnTaskCreate>
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	461d      	mov	r5, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461c      	mov	r4, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	1ae3      	subs	r3, r4, r3
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	462b      	mov	r3, r5
 80030e4:	f001 f938 	bl	8004358 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 f9b8 	bl	8005460 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	2201      	movs	r2, #1
 80030f6:	409a      	lsls	r2, r3
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <prvAddNewTaskToReadyList+0x15c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <prvAddNewTaskToReadyList+0x15c>)
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	492b      	ldr	r1, [pc, #172]	; (80031b4 <prvAddNewTaskToReadyList+0x160>)
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3304      	adds	r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	3204      	adds	r2, #4
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <prvAddNewTaskToReadyList+0x160>)
 8003146:	441a      	add	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	615a      	str	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4918      	ldr	r1, [pc, #96]	; (80031b4 <prvAddNewTaskToReadyList+0x160>)
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	4814      	ldr	r0, [pc, #80]	; (80031b4 <prvAddNewTaskToReadyList+0x160>)
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4403      	add	r3, r0
 800316c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800316e:	f7ff f85d 	bl	800222c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <prvAddNewTaskToReadyList+0x154>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <prvAddNewTaskToReadyList+0x150>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d207      	bcs.n	8003198 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <prvAddNewTaskToReadyList+0x164>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bdb0      	pop	{r4, r5, r7, pc}
 80031a0:	20012d2c 	.word	0x20012d2c
 80031a4:	20012c54 	.word	0x20012c54
 80031a8:	20012d38 	.word	0x20012d38
 80031ac:	20012d48 	.word	0x20012d48
 80031b0:	20012d34 	.word	0x20012d34
 80031b4:	20012c58 	.word	0x20012c58
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01a      	beq.n	8003204 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <vTaskDelay+0x68>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <vTaskDelay+0x2e>
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e7fe      	b.n	80031e8 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80031ea:	f000 f87f 	bl	80032ec <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	2023      	movs	r0, #35	; 0x23
 80031f2:	f001 fc55 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031f6:	2100      	movs	r1, #0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fdad 	bl	8003d58 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031fe:	f000 f883 	bl	8003308 <xTaskResumeAll>
 8003202:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d107      	bne.n	800321a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <vTaskDelay+0x6c>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20012d54 	.word	0x20012d54
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <vTaskStartScheduler+0xa0>)
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2300      	movs	r3, #0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	2282      	movs	r2, #130	; 0x82
 800323e:	4924      	ldr	r1, [pc, #144]	; (80032d0 <vTaskStartScheduler+0xa4>)
 8003240:	4824      	ldr	r0, [pc, #144]	; (80032d4 <vTaskStartScheduler+0xa8>)
 8003242:	f7ff fe35 	bl	8002eb0 <xTaskCreate>
 8003246:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800324e:	f000 fe03 	bl	8003e58 <xTimerCreateTimerTask>
 8003252:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d123      	bne.n	80032a2 <vTaskStartScheduler+0x76>
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <vTaskStartScheduler+0xac>)
 800326e:	f04f 32ff 	mov.w	r2, #4294967295
 8003272:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <vTaskStartScheduler+0xb0>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <vTaskStartScheduler+0xb4>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <vTaskStartScheduler+0xb8>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <vTaskStartScheduler+0xa0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d102      	bne.n	8003292 <vTaskStartScheduler+0x66>
 800328c:	f002 f848 	bl	8005320 <SEGGER_SYSVIEW_OnIdle>
 8003290:	e004      	b.n	800329c <vTaskStartScheduler+0x70>
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <vTaskStartScheduler+0xb8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 f8a0 	bl	80053dc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800329c:	f7fe fefa 	bl	8002094 <xPortStartScheduler>
 80032a0:	e00d      	b.n	80032be <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d109      	bne.n	80032be <vTaskStartScheduler+0x92>
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e7fe      	b.n	80032bc <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <vTaskStartScheduler+0xbc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20012d50 	.word	0x20012d50
 80032d0:	08005848 	.word	0x08005848
 80032d4:	08003bbd 	.word	0x08003bbd
 80032d8:	20012d4c 	.word	0x20012d4c
 80032dc:	20012d38 	.word	0x20012d38
 80032e0:	20012d30 	.word	0x20012d30
 80032e4:	20012c54 	.word	0x20012c54
 80032e8:	20000010 	.word	0x20000010

080032ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <vTaskSuspendAll+0x18>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a03      	ldr	r2, [pc, #12]	; (8003304 <vTaskSuspendAll+0x18>)
 80032f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	20012d54 	.word	0x20012d54

08003308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <xTaskResumeAll+0x1d8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <xTaskResumeAll+0x2a>
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	e7fe      	b.n	8003330 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003332:	f7fe ff4d 	bl	80021d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003336:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <xTaskResumeAll+0x1d8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <xTaskResumeAll+0x1d8>)
 800333e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003340:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <xTaskResumeAll+0x1d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 80c4 	bne.w	80034d2 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800334a:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <xTaskResumeAll+0x1dc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80bf 	beq.w	80034d2 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003354:	e08e      	b.n	8003474 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003356:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <xTaskResumeAll+0x1e0>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	6a12      	ldr	r2, [r2, #32]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	69d2      	ldr	r2, [r2, #28]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	3318      	adds	r3, #24
 8003380:	429a      	cmp	r2, r3
 8003382:	d103      	bne.n	800338c <xTaskResumeAll+0x84>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3304      	adds	r3, #4
 80033be:	429a      	cmp	r2, r3
 80033c0:	d103      	bne.n	80033ca <xTaskResumeAll+0xc2>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 f83f 	bl	8005460 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <xTaskResumeAll+0x1e4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <xTaskResumeAll+0x1e4>)
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	493d      	ldr	r1, [pc, #244]	; (80034f0 <xTaskResumeAll+0x1e8>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3304      	adds	r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	60da      	str	r2, [r3, #12]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	3204      	adds	r2, #4
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1d1a      	adds	r2, r3, #4
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <xTaskResumeAll+0x1e8>)
 8003438:	441a      	add	r2, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	615a      	str	r2, [r3, #20]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	492b      	ldr	r1, [pc, #172]	; (80034f0 <xTaskResumeAll+0x1e8>)
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c59      	adds	r1, r3, #1
 8003452:	4827      	ldr	r0, [pc, #156]	; (80034f0 <xTaskResumeAll+0x1e8>)
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <xTaskResumeAll+0x1ec>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <xTaskResumeAll+0x1f0>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <xTaskResumeAll+0x1e0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f47f af6c 	bne.w	8003356 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003484:	f000 fc2e 	bl	8003ce4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <xTaskResumeAll+0x1f4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003494:	f000 f846 	bl	8003524 <xTaskIncrementTick>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 800349e:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <xTaskResumeAll+0x1f0>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f1      	bne.n	8003494 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <xTaskResumeAll+0x1f4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xTaskResumeAll+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <xTaskResumeAll+0x1f8>)
 80034c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034d2:	f7fe feab 	bl	800222c <vPortExitCritical>

    return xAlreadyYielded;
 80034d6:	69bb      	ldr	r3, [r7, #24]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20012d54 	.word	0x20012d54
 80034e4:	20012d2c 	.word	0x20012d2c
 80034e8:	20012cec 	.word	0x20012cec
 80034ec:	20012d34 	.word	0x20012d34
 80034f0:	20012c58 	.word	0x20012c58
 80034f4:	20012c54 	.word	0x20012c54
 80034f8:	20012d40 	.word	0x20012d40
 80034fc:	20012d3c 	.word	0x20012d3c
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <xTaskGetTickCount+0x1c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20012d30 	.word	0x20012d30

08003524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <xTaskIncrementTick+0x208>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 80ef 	bne.w	8003716 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003538:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <xTaskIncrementTick+0x20c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003540:	4a7b      	ldr	r2, [pc, #492]	; (8003730 <xTaskIncrementTick+0x20c>)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11f      	bne.n	800358c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800354c:	4b79      	ldr	r3, [pc, #484]	; (8003734 <xTaskIncrementTick+0x210>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <xTaskIncrementTick+0x46>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e7fe      	b.n	8003568 <xTaskIncrementTick+0x44>
 800356a:	4b72      	ldr	r3, [pc, #456]	; (8003734 <xTaskIncrementTick+0x210>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	4b71      	ldr	r3, [pc, #452]	; (8003738 <xTaskIncrementTick+0x214>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <xTaskIncrementTick+0x210>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <xTaskIncrementTick+0x214>)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <xTaskIncrementTick+0x218>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a6d      	ldr	r2, [pc, #436]	; (800373c <xTaskIncrementTick+0x218>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	f000 fbac 	bl	8003ce4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <xTaskIncrementTick+0x21c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	429a      	cmp	r2, r3
 8003594:	f0c0 80aa 	bcc.w	80036ec <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <xTaskIncrementTick+0x210>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a2:	4b67      	ldr	r3, [pc, #412]	; (8003740 <xTaskIncrementTick+0x21c>)
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	601a      	str	r2, [r3, #0]
                    break;
 80035aa:	e09f      	b.n	80036ec <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <xTaskIncrementTick+0x210>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d203      	bcs.n	80035cc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035c4:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <xTaskIncrementTick+0x21c>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035ca:	e08f      	b.n	80036ec <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	68d2      	ldr	r2, [r2, #12]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	3304      	adds	r3, #4
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d103      	bne.n	80035fa <xTaskIncrementTick+0xd6>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01e      	beq.n	8003650 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	6a12      	ldr	r2, [r2, #32]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	69d2      	ldr	r2, [r2, #28]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3318      	adds	r3, #24
 8003634:	429a      	cmp	r2, r3
 8003636:	d103      	bne.n	8003640 <xTaskIncrementTick+0x11c>
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2200      	movs	r2, #0
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4618      	mov	r0, r3
 8003654:	f001 ff04 	bl	8005460 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2201      	movs	r2, #1
 800365e:	409a      	lsls	r2, r3
 8003660:	4b38      	ldr	r3, [pc, #224]	; (8003744 <xTaskIncrementTick+0x220>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	4a37      	ldr	r2, [pc, #220]	; (8003744 <xTaskIncrementTick+0x220>)
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	4936      	ldr	r1, [pc, #216]	; (8003748 <xTaskIncrementTick+0x224>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	3204      	adds	r2, #4
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <xTaskIncrementTick+0x224>)
 80036ae:	441a      	add	r2, r3
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	615a      	str	r2, [r3, #20]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4923      	ldr	r1, [pc, #140]	; (8003748 <xTaskIncrementTick+0x224>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	1c59      	adds	r1, r3, #1
 80036c8:	481f      	ldr	r0, [pc, #124]	; (8003748 <xTaskIncrementTick+0x224>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4403      	add	r3, r0
 80036d4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <xTaskIncrementTick+0x228>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f67f af59 	bls.w	8003598 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ea:	e755      	b.n	8003598 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <xTaskIncrementTick+0x228>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	4915      	ldr	r1, [pc, #84]	; (8003748 <xTaskIncrementTick+0x224>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d901      	bls.n	8003708 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <xTaskIncrementTick+0x22c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	e004      	b.n	8003720 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <xTaskIncrementTick+0x230>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <xTaskIncrementTick+0x230>)
 800371e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003722:	4618      	mov	r0, r3
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20012d54 	.word	0x20012d54
 8003730:	20012d30 	.word	0x20012d30
 8003734:	20012ce4 	.word	0x20012ce4
 8003738:	20012ce8 	.word	0x20012ce8
 800373c:	20012d44 	.word	0x20012d44
 8003740:	20012d4c 	.word	0x20012d4c
 8003744:	20012d34 	.word	0x20012d34
 8003748:	20012c58 	.word	0x20012c58
 800374c:	20012c54 	.word	0x20012c54
 8003750:	20012d40 	.word	0x20012d40
 8003754:	20012d3c 	.word	0x20012d3c

08003758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <vTaskSwitchContext+0xb8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <vTaskSwitchContext+0xbc>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800376c:	e04c      	b.n	8003808 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <vTaskSwitchContext+0xbc>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <vTaskSwitchContext+0xc0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	f1c3 031f 	rsb	r3, r3, #31
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	4924      	ldr	r1, [pc, #144]	; (800381c <vTaskSwitchContext+0xc4>)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <vTaskSwitchContext+0x5a>
        __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	e7fe      	b.n	80037b0 <vTaskSwitchContext+0x58>
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <vTaskSwitchContext+0xc4>)
 80037be:	4413      	add	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3308      	adds	r3, #8
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d104      	bne.n	80037e2 <vTaskSwitchContext+0x8a>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <vTaskSwitchContext+0xc8>)
 80037ea:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <vTaskSwitchContext+0xc8>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <vTaskSwitchContext+0xcc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d102      	bne.n	80037fe <vTaskSwitchContext+0xa6>
 80037f8:	f001 fd92 	bl	8005320 <SEGGER_SYSVIEW_OnIdle>
}
 80037fc:	e004      	b.n	8003808 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <vTaskSwitchContext+0xc8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fdea 	bl	80053dc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20012d54 	.word	0x20012d54
 8003814:	20012d40 	.word	0x20012d40
 8003818:	20012d34 	.word	0x20012d34
 800381c:	20012c58 	.word	0x20012c58
 8003820:	20012c54 	.word	0x20012c54
 8003824:	20012d50 	.word	0x20012d50

08003828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <vTaskPlaceOnEventList+0x24>
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e7fe      	b.n	800384a <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <vTaskPlaceOnEventList+0x44>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3318      	adds	r3, #24
 8003852:	4619      	mov	r1, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fe ff8c 	bl	8002772 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800385a:	2101      	movs	r1, #1
 800385c:	6838      	ldr	r0, [r7, #0]
 800385e:	f000 fa7b 	bl	8003d58 <prvAddCurrentTaskToDelayedList>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20012c54 	.word	0x20012c54

08003870 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <vTaskPlaceOnEventListRestricted+0x26>
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e7fe      	b.n	8003894 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <vTaskPlaceOnEventListRestricted+0x8c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	61da      	str	r2, [r3, #28]
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	621a      	str	r2, [r3, #32]
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	3218      	adds	r2, #24
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f103 0218 	add.w	r2, r3, #24
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	629a      	str	r2, [r3, #40]	; 0x28
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038e4:	2024      	movs	r0, #36	; 0x24
 80038e6:	f001 f8bd 	bl	8004a64 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	68b8      	ldr	r0, [r7, #8]
 80038ee:	f000 fa33 	bl	8003d58 <prvAddCurrentTaskToDelayedList>
    }
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20012c54 	.word	0x20012c54

08003900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <xTaskRemoveFromEventList+0x2a>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e7fe      	b.n	8003928 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	6a12      	ldr	r2, [r2, #32]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	69d2      	ldr	r2, [r2, #28]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	3318      	adds	r3, #24
 800394c:	429a      	cmp	r2, r3
 800394e:	d103      	bne.n	8003958 <xTaskRemoveFromEventList+0x58>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	1e5a      	subs	r2, r3, #1
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <xTaskRemoveFromEventList+0x198>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d162      	bne.n	8003a36 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	3304      	adds	r3, #4
 8003992:	429a      	cmp	r2, r3
 8003994:	d103      	bne.n	800399e <xTaskRemoveFromEventList+0x9e>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fd55 	bl	8005460 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <xTaskRemoveFromEventList+0x19c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <xTaskRemoveFromEventList+0x19c>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <xTaskRemoveFromEventList+0x1a0>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3304      	adds	r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	3204      	adds	r2, #4
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	1d1a      	adds	r2, r3, #4
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <xTaskRemoveFromEventList+0x1a0>)
 8003a0c:	441a      	add	r2, r3
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	615a      	str	r2, [r3, #20]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <xTaskRemoveFromEventList+0x1a0>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1c59      	adds	r1, r3, #1
 8003a26:	481e      	ldr	r0, [pc, #120]	; (8003aa0 <xTaskRemoveFromEventList+0x1a0>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4403      	add	r3, r0
 8003a32:	6019      	str	r1, [r3, #0]
 8003a34:	e01b      	b.n	8003a6e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <xTaskRemoveFromEventList+0x1a4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	621a      	str	r2, [r3, #32]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	3218      	adds	r2, #24
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f103 0218 	add.w	r2, r3, #24
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <xTaskRemoveFromEventList+0x1a4>)
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <xTaskRemoveFromEventList+0x1a4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <xTaskRemoveFromEventList+0x1a4>)
 8003a6c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <xTaskRemoveFromEventList+0x1a8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d905      	bls.n	8003a88 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <xTaskRemoveFromEventList+0x1ac>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e001      	b.n	8003a8c <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20012d54 	.word	0x20012d54
 8003a9c:	20012d34 	.word	0x20012d34
 8003aa0:	20012c58 	.word	0x20012c58
 8003aa4:	20012cec 	.word	0x20012cec
 8003aa8:	20012c54 	.word	0x20012c54
 8003aac:	20012d40 	.word	0x20012d40

08003ab0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <vTaskInternalSetTimeOutState+0x24>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <vTaskInternalSetTimeOutState+0x28>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	605a      	str	r2, [r3, #4]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	20012d44 	.word	0x20012d44
 8003ad8:	20012d30 	.word	0x20012d30

08003adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <xTaskCheckForTimeOut+0x24>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e7fe      	b.n	8003afe <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <xTaskCheckForTimeOut+0x3e>
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e7fe      	b.n	8003b18 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003b1a:	f7fe fb59 	bl	80021d0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <xTaskCheckForTimeOut+0xc0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d102      	bne.n	8003b3e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e026      	b.n	8003b8c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <xTaskCheckForTimeOut+0xc4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d00a      	beq.n	8003b60 <xTaskCheckForTimeOut+0x84>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d305      	bcc.n	8003b60 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e015      	b.n	8003b8c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20b      	bcs.n	8003b82 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad2      	subs	r2, r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff9a 	bl	8003ab0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e004      	b.n	8003b8c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b8c:	f7fe fb4e 	bl	800222c <vPortExitCritical>

    return xReturn;
 8003b90:	69fb      	ldr	r3, [r7, #28]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20012d30 	.word	0x20012d30
 8003ba0:	20012d44 	.word	0x20012d44

08003ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <vTaskMissedYield+0x14>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20012d40 	.word	0x20012d40

08003bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bc4:	f000 f852 	bl	8003c6c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <prvIdleTask+0x28>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d9f9      	bls.n	8003bc4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <prvIdleTask+0x2c>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003be0:	e7f0      	b.n	8003bc4 <prvIdleTask+0x8>
 8003be2:	bf00      	nop
 8003be4:	20012c58 	.word	0x20012c58
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	e00c      	b.n	8003c12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <prvInitialiseTaskLists+0x60>)
 8003c04:	4413      	add	r3, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fd86 	bl	8002718 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d9ef      	bls.n	8003bf8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c18:	480d      	ldr	r0, [pc, #52]	; (8003c50 <prvInitialiseTaskLists+0x64>)
 8003c1a:	f7fe fd7d 	bl	8002718 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c1e:	480d      	ldr	r0, [pc, #52]	; (8003c54 <prvInitialiseTaskLists+0x68>)
 8003c20:	f7fe fd7a 	bl	8002718 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <prvInitialiseTaskLists+0x6c>)
 8003c26:	f7fe fd77 	bl	8002718 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c2a:	480c      	ldr	r0, [pc, #48]	; (8003c5c <prvInitialiseTaskLists+0x70>)
 8003c2c:	f7fe fd74 	bl	8002718 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <prvInitialiseTaskLists+0x74>)
 8003c32:	f7fe fd71 	bl	8002718 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvInitialiseTaskLists+0x78>)
 8003c38:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <prvInitialiseTaskLists+0x64>)
 8003c3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvInitialiseTaskLists+0x7c>)
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <prvInitialiseTaskLists+0x68>)
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20012c58 	.word	0x20012c58
 8003c50:	20012cbc 	.word	0x20012cbc
 8003c54:	20012cd0 	.word	0x20012cd0
 8003c58:	20012cec 	.word	0x20012cec
 8003c5c:	20012d00 	.word	0x20012d00
 8003c60:	20012d18 	.word	0x20012d18
 8003c64:	20012ce4 	.word	0x20012ce4
 8003c68:	20012ce8 	.word	0x20012ce8

08003c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c72:	e019      	b.n	8003ca8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c74:	f7fe faac 	bl	80021d0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <prvCheckTasksWaitingTermination+0x4c>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fdad 	bl	80027e4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <prvCheckTasksWaitingTermination+0x50>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <prvCheckTasksWaitingTermination+0x50>)
 8003c92:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <prvCheckTasksWaitingTermination+0x54>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <prvCheckTasksWaitingTermination+0x54>)
 8003c9c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003c9e:	f7fe fac5 	bl	800222c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f80e 	bl	8003cc4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <prvCheckTasksWaitingTermination+0x54>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e1      	bne.n	8003c74 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20012d00 	.word	0x20012d00
 8003cbc:	20012d2c 	.word	0x20012d2c
 8003cc0:	20012d14 	.word	0x20012d14

08003cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fc11 	bl	80024f8 <vPortFree>
            vPortFree( pxTCB );
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe fc0e 	bl	80024f8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <prvResetNextTaskUnblockTime+0x30>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <prvResetNextTaskUnblockTime+0x34>)
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cfa:	e005      	b.n	8003d08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <prvResetNextTaskUnblockTime+0x30>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <prvResetNextTaskUnblockTime+0x34>)
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20012ce4 	.word	0x20012ce4
 8003d18:	20012d4c 	.word	0x20012d4c

08003d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <xTaskGetSchedulerState+0x34>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	e008      	b.n	8003d42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <xTaskGetSchedulerState+0x38>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e001      	b.n	8003d42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d42:	687b      	ldr	r3, [r7, #4]
    }
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	20012d38 	.word	0x20012d38
 8003d54:	20012d54 	.word	0x20012d54

08003d58 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fd38 	bl	80027e4 <uxListRemove>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	2201      	movs	r2, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xec>)
 8003d90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d124      	bne.n	8003de4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d021      	beq.n	8003de4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	3204      	adds	r2, #4
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1d1a      	adds	r2, r3, #4
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003de2:	e026      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d209      	bcs.n	8003e10 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fe fcb2 	bl	8002772 <vListInsert>
}
 8003e0e:	e010      	b.n	8003e32 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fe fca8 	bl	8002772 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d202      	bcs.n	8003e32 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20012d30 	.word	0x20012d30
 8003e40:	20012c54 	.word	0x20012c54
 8003e44:	20012d34 	.word	0x20012d34
 8003e48:	20012d18 	.word	0x20012d18
 8003e4c:	20012ce8 	.word	0x20012ce8
 8003e50:	20012ce4 	.word	0x20012ce4
 8003e54:	20012d4c 	.word	0x20012d4c

08003e58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e62:	f000 fa43 	bl	80042ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <xTimerCreateTimerTask+0x54>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <xTimerCreateTimerTask+0x58>)
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e7c:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <xTimerCreateTimerTask+0x5c>)
 8003e7e:	480e      	ldr	r0, [pc, #56]	; (8003eb8 <xTimerCreateTimerTask+0x60>)
 8003e80:	f7ff f816 	bl	8002eb0 <xTaskCreate>
 8003e84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <xTimerCreateTimerTask+0x48>
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	e7fe      	b.n	8003e9e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003ea0:	687b      	ldr	r3, [r7, #4]
    }
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20012d88 	.word	0x20012d88
 8003eb0:	20012d8c 	.word	0x20012d8c
 8003eb4:	08005850 	.word	0x08005850
 8003eb8:	08003f5d 	.word	0x08003f5d

08003ebc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ec8:	e008      	b.n	8003edc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	18d1      	adds	r1, r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8db 	bl	80040a4 <prvInsertTimerInActiveList>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ea      	bne.n	8003eca <prvReloadTimer+0xe>
        }
    }
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <prvProcessExpiredTimer+0x5c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fc65 	bl	80027e4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ffc5 	bl	8003ebc <prvReloadTimer>
 8003f32:	e008      	b.n	8003f46 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	4798      	blx	r3
    }
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20012d80 	.word	0x20012d80

08003f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f64:	f107 0308 	add.w	r3, r7, #8
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f857 	bl	800401c <prvGetNextExpireTime>
 8003f6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f803 	bl	8003f80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f7a:	f000 f8d5 	bl	8004128 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f7e:	e7f1      	b.n	8003f64 <prvTimerTask+0x8>

08003f80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f8a:	f7ff f9af 	bl	80032ec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f866 	bl	8004064 <prvSampleTimeNow>
 8003f98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d130      	bne.n	8004002 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <prvProcessTimerOrBlockTask+0x3c>
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d806      	bhi.n	8003fbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fae:	f7ff f9ab 	bl	8003308 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ffa1 	bl	8003efc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fba:	e024      	b.n	8004006 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <prvProcessTimerOrBlockTask+0x90>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <prvProcessTimerOrBlockTask+0x50>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <prvProcessTimerOrBlockTask+0x52>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <prvProcessTimerOrBlockTask+0x94>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7fe ff31 	bl	8002e48 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003fe6:	f7ff f98f 	bl	8003308 <xTaskResumeAll>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <prvProcessTimerOrBlockTask+0x98>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
    }
 8004000:	e001      	b.n	8004006 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004002:	f7ff f981 	bl	8003308 <xTaskResumeAll>
    }
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20012d84 	.word	0x20012d84
 8004014:	20012d88 	.word	0x20012d88
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <prvGetNextExpireTime+0x44>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <prvGetNextExpireTime+0x16>
 800402e:	2201      	movs	r2, #1
 8004030:	e000      	b.n	8004034 <prvGetNextExpireTime+0x18>
 8004032:	2200      	movs	r2, #0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <prvGetNextExpireTime+0x44>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e001      	b.n	8004050 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004050:	68fb      	ldr	r3, [r7, #12]
    }
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20012d80 	.word	0x20012d80

08004064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800406c:	f7ff fa4a 	bl	8003504 <xTaskGetTickCount>
 8004070:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <prvSampleTimeNow+0x3c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	429a      	cmp	r2, r3
 800407a:	d205      	bcs.n	8004088 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800407c:	f000 f910 	bl	80042a0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e002      	b.n	800408e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <prvSampleTimeNow+0x3c>)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004094:	68fb      	ldr	r3, [r7, #12]
    }
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20012d90 	.word	0x20012d90

080040a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d812      	bhi.n	80040f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad2      	subs	r2, r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e01b      	b.n	8004116 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <prvInsertTimerInActiveList+0x7c>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fe fb42 	bl	8002772 <vListInsert>
 80040ee:	e012      	b.n	8004116 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d206      	bcs.n	8004106 <prvInsertTimerInActiveList+0x62>
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e007      	b.n	8004116 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <prvInsertTimerInActiveList+0x80>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3304      	adds	r3, #4
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f7fe fb2e 	bl	8002772 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004116:	697b      	ldr	r3, [r7, #20]
    }
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20012d84 	.word	0x20012d84
 8004124:	20012d80 	.word	0x20012d80

08004128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800412e:	e0a5      	b.n	800427c <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f2c0 80a1 	blt.w	800427a <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fb4b 	bl	80027e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff87 	bl	8004064 <prvSampleTimeNow>
 8004156:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	3b01      	subs	r3, #1
 800415c:	2b08      	cmp	r3, #8
 800415e:	f200 808d 	bhi.w	800427c <prvProcessReceivedCommands+0x154>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <prvProcessReceivedCommands+0x40>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800418d 	.word	0x0800418d
 800416c:	0800418d 	.word	0x0800418d
 8004170:	080041f5 	.word	0x080041f5
 8004174:	08004209 	.word	0x08004209
 8004178:	08004251 	.word	0x08004251
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800418d 	.word	0x0800418d
 8004184:	080041f5 	.word	0x080041f5
 8004188:	08004209 	.word	0x08004209
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	18d1      	adds	r1, r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	69f8      	ldr	r0, [r7, #28]
 80041ac:	f7ff ff7a 	bl	80040a4 <prvInsertTimerInActiveList>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d062      	beq.n	800427c <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4619      	mov	r1, r3
 80041d0:	69f8      	ldr	r0, [r7, #28]
 80041d2:	f7ff fe73 	bl	8003ebc <prvReloadTimer>
 80041d6:	e008      	b.n	80041ea <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	69f8      	ldr	r0, [r7, #28]
 80041f0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80041f2:	e043      	b.n	800427c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004206:	e039      	b.n	800427c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <prvProcessReceivedCommands+0x114>
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e7fe      	b.n	800423a <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	18d1      	adds	r1, r2, r3
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	69f8      	ldr	r0, [r7, #28]
 800424a:	f7ff ff2b 	bl	80040a4 <prvInsertTimerInActiveList>
                        break;
 800424e:	e015      	b.n	800427c <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 800425e:	69f8      	ldr	r0, [r7, #28]
 8004260:	f7fe f94a 	bl	80024f8 <vPortFree>
 8004264:	e00a      	b.n	800427c <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004278:	e000      	b.n	800427c <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800427a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <prvProcessReceivedCommands+0x174>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f107 0108 	add.w	r1, r7, #8
 8004284:	2200      	movs	r2, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fbe6 	bl	8002a58 <xQueueReceive>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	f47f af4e 	bne.w	8004130 <prvProcessReceivedCommands+0x8>
        }
    }
 8004294:	bf00      	nop
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20012d88 	.word	0x20012d88

080042a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a6:	e009      	b.n	80042bc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042a8:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <prvSwitchTimerLists+0x44>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042b2:	f04f 31ff 	mov.w	r1, #4294967295
 80042b6:	6838      	ldr	r0, [r7, #0]
 80042b8:	f7ff fe20 	bl	8003efc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <prvSwitchTimerLists+0x44>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <prvSwitchTimerLists+0x44>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <prvSwitchTimerLists+0x48>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <prvSwitchTimerLists+0x44>)
 80042d2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <prvSwitchTimerLists+0x48>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
    }
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20012d80 	.word	0x20012d80
 80042e8:	20012d84 	.word	0x20012d84

080042ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042f0:	f7fd ff6e 	bl	80021d0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <prvCheckForValidListAndQueue+0x54>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11d      	bne.n	8004338 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80042fc:	4811      	ldr	r0, [pc, #68]	; (8004344 <prvCheckForValidListAndQueue+0x58>)
 80042fe:	f7fe fa0b 	bl	8002718 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004302:	4811      	ldr	r0, [pc, #68]	; (8004348 <prvCheckForValidListAndQueue+0x5c>)
 8004304:	f7fe fa08 	bl	8002718 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <prvCheckForValidListAndQueue+0x58>)
 800430c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <prvCheckForValidListAndQueue+0x64>)
 8004310:	4a0d      	ldr	r2, [pc, #52]	; (8004348 <prvCheckForValidListAndQueue+0x5c>)
 8004312:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004314:	2200      	movs	r2, #0
 8004316:	210c      	movs	r1, #12
 8004318:	200a      	movs	r0, #10
 800431a:	f7fe fb21 	bl	8002960 <xQueueGenericCreate>
 800431e:	4602      	mov	r2, r0
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <prvCheckForValidListAndQueue+0x54>)
 8004322:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <prvCheckForValidListAndQueue+0x54>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <prvCheckForValidListAndQueue+0x54>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4908      	ldr	r1, [pc, #32]	; (8004354 <prvCheckForValidListAndQueue+0x68>)
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fd32 	bl	8002d9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004338:	f7fd ff78 	bl	800222c <vPortExitCritical>
    }
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20012d88 	.word	0x20012d88
 8004344:	20012d58 	.word	0x20012d58
 8004348:	20012d6c 	.word	0x20012d6c
 800434c:	20012d80 	.word	0x20012d80
 8004350:	20012d84 	.word	0x20012d84
 8004354:	08005858 	.word	0x08005858

08004358 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004366:	2205      	movs	r2, #5
 8004368:	492b      	ldr	r1, [pc, #172]	; (8004418 <SYSVIEW_AddTask+0xc0>)
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f001 fa26 	bl	80057bc <memcmp>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d04b      	beq.n	800440e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <SYSVIEW_AddTask+0xc4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b07      	cmp	r3, #7
 800437c:	d903      	bls.n	8004386 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800437e:	4828      	ldr	r0, [pc, #160]	; (8004420 <SYSVIEW_AddTask+0xc8>)
 8004380:	f001 f99c 	bl	80056bc <SEGGER_SYSVIEW_Warn>
    return;
 8004384:	e044      	b.n	8004410 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <SYSVIEW_AddTask+0xc4>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4926      	ldr	r1, [pc, #152]	; (8004424 <SYSVIEW_AddTask+0xcc>)
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <SYSVIEW_AddTask+0xc4>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4921      	ldr	r1, [pc, #132]	; (8004424 <SYSVIEW_AddTask+0xcc>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3304      	adds	r3, #4
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <SYSVIEW_AddTask+0xc4>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	491b      	ldr	r1, [pc, #108]	; (8004424 <SYSVIEW_AddTask+0xcc>)
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3308      	adds	r3, #8
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <SYSVIEW_AddTask+0xc4>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4916      	ldr	r1, [pc, #88]	; (8004424 <SYSVIEW_AddTask+0xcc>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	330c      	adds	r3, #12
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <SYSVIEW_AddTask+0xc4>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4910      	ldr	r1, [pc, #64]	; (8004424 <SYSVIEW_AddTask+0xcc>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3310      	adds	r3, #16
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <SYSVIEW_AddTask+0xc4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <SYSVIEW_AddTask+0xc4>)
 80043fa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f80e 	bl	8004428 <SYSVIEW_SendTaskInfo>
 800440c:	e000      	b.n	8004410 <SYSVIEW_AddTask+0xb8>
    return;
 800440e:	bf00      	nop

}
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	08005860 	.word	0x08005860
 800441c:	20012e34 	.word	0x20012e34
 8004420:	08005868 	.word	0x08005868
 8004424:	20012d94 	.word	0x20012d94

08004428 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	2214      	movs	r2, #20
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f9d6 	bl	80057f0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fe37 	bl	80050d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004462:	bf00      	nop
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <_DoInit+0x98>)
 8004474:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2203      	movs	r2, #3
 800447a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2203      	movs	r2, #3
 8004480:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <_DoInit+0x9c>)
 8004486:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <_DoInit+0xa0>)
 800448c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004494:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <_DoInit+0x9c>)
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <_DoInit+0xa4>)
 80044b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2210      	movs	r2, #16
 80044b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3307      	adds	r3, #7
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <_DoInit+0xa8>)
 80044d2:	6810      	ldr	r0, [r2, #0]
 80044d4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044d6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <_DoInit+0xac>)
 80044de:	6810      	ldr	r0, [r2, #0]
 80044e0:	6018      	str	r0, [r3, #0]
 80044e2:	8891      	ldrh	r1, [r2, #4]
 80044e4:	7992      	ldrb	r2, [r2, #6]
 80044e6:	8099      	strh	r1, [r3, #4]
 80044e8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044ea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044f4:	f3bf 8f5f 	dmb	sy
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200133e0 	.word	0x200133e0
 8004508:	080058b8 	.word	0x080058b8
 800450c:	20012e38 	.word	0x20012e38
 8004510:	20013238 	.word	0x20013238
 8004514:	080058c4 	.word	0x080058c4
 8004518:	080058c8 	.word	0x080058c8

0800451c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b08c      	sub	sp, #48	; 0x30
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004528:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <SEGGER_RTT_ReadNoLock+0x108>)
 800452a:	623b      	str	r3, [r7, #32]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <SEGGER_RTT_ReadNoLock+0x1e>
 8004536:	f7ff ff99 	bl	800446c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3360      	adds	r3, #96	; 0x60
 8004546:	4a37      	ldr	r2, [pc, #220]	; (8004624 <SEGGER_RTT_ReadNoLock+0x108>)
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d92b      	bls.n	80045c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4293      	cmp	r3, r2
 8004578:	bf28      	it	cs
 800457a:	4613      	movcs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	4413      	add	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	6939      	ldr	r1, [r7, #16]
 800458c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800458e:	f001 f924 	bl	80057da <memcpy>
    NumBytesRead += NumBytesRem;
 8004592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d101      	bne.n	80045c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045bc:	2300      	movs	r3, #0
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bf28      	it	cs
 80045d0:	4613      	movcs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d019      	beq.n	800460e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	4413      	add	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	6939      	ldr	r1, [r7, #16]
 80045e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045ea:	f001 f8f6 	bl	80057da <memcpy>
    NumBytesRead += NumBytesRem;
 80045ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4413      	add	r3, r2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004618:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	; 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200133e0 	.word	0x200133e0

08004628 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004638:	e002      	b.n	8004640 <_EncodeStr+0x18>
    Len++;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3301      	adds	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4413      	add	r3, r2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f6      	bne.n	800463a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d901      	bls.n	8004658 <_EncodeStr+0x30>
    Len = Limit;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2bfe      	cmp	r3, #254	; 0xfe
 800465c:	d806      	bhi.n	800466c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	60fa      	str	r2, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e011      	b.n	8004690 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	60fa      	str	r2, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	60fa      	str	r2, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	0a19      	lsrs	r1, r3, #8
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	60fa      	str	r2, [r7, #12]
 800468c:	b2ca      	uxtb	r2, r1
 800468e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004694:	e00a      	b.n	80046ac <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	1c53      	adds	r3, r2, #1
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	60f9      	str	r1, [r7, #12]
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
    n++;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3f0      	bcc.n	8004696 <_EncodeStr+0x6e>
  }
  return pPayload;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <_HandleIncomingPacket+0xd4>)
 80046e4:	7e1b      	ldrb	r3, [r3, #24]
 80046e6:	4618      	mov	r0, r3
 80046e8:	1cfb      	adds	r3, r7, #3
 80046ea:	2201      	movs	r2, #1
 80046ec:	4619      	mov	r1, r3
 80046ee:	f7ff ff15 	bl	800451c <SEGGER_RTT_ReadNoLock>
 80046f2:	4603      	mov	r3, r0
 80046f4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dd4d      	ble.n	8004798 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d022      	beq.n	8004748 <_HandleIncomingPacket+0x6c>
 8004702:	2b05      	cmp	r3, #5
 8004704:	dc0b      	bgt.n	800471e <_HandleIncomingPacket+0x42>
 8004706:	2b02      	cmp	r3, #2
 8004708:	d015      	beq.n	8004736 <_HandleIncomingPacket+0x5a>
 800470a:	2b02      	cmp	r3, #2
 800470c:	dc02      	bgt.n	8004714 <_HandleIncomingPacket+0x38>
 800470e:	2b01      	cmp	r3, #1
 8004710:	d00e      	beq.n	8004730 <_HandleIncomingPacket+0x54>
 8004712:	e034      	b.n	800477e <_HandleIncomingPacket+0xa2>
 8004714:	2b03      	cmp	r3, #3
 8004716:	d011      	beq.n	800473c <_HandleIncomingPacket+0x60>
 8004718:	2b04      	cmp	r3, #4
 800471a:	d012      	beq.n	8004742 <_HandleIncomingPacket+0x66>
 800471c:	e02f      	b.n	800477e <_HandleIncomingPacket+0xa2>
 800471e:	2b07      	cmp	r3, #7
 8004720:	d018      	beq.n	8004754 <_HandleIncomingPacket+0x78>
 8004722:	2b07      	cmp	r3, #7
 8004724:	db13      	blt.n	800474e <_HandleIncomingPacket+0x72>
 8004726:	2b7f      	cmp	r3, #127	; 0x7f
 8004728:	d038      	beq.n	800479c <_HandleIncomingPacket+0xc0>
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d015      	beq.n	800475a <_HandleIncomingPacket+0x7e>
 800472e:	e026      	b.n	800477e <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004730:	f000 fb54 	bl	8004ddc <SEGGER_SYSVIEW_Start>
      break;
 8004734:	e037      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004736:	f000 fc0b 	bl	8004f50 <SEGGER_SYSVIEW_Stop>
      break;
 800473a:	e034      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800473c:	f000 fdc0 	bl	80052c0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004740:	e031      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004742:	f000 fda9 	bl	8005298 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004746:	e02e      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004748:	f000 fc28 	bl	8004f9c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800474c:	e02b      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800474e:	f000 ff77 	bl	8005640 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004752:	e028      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004754:	f000 ff56 	bl	8005604 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004758:	e025      	b.n	80047a6 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <_HandleIncomingPacket+0xd4>)
 800475c:	7e1b      	ldrb	r3, [r3, #24]
 800475e:	4618      	mov	r0, r3
 8004760:	1cfb      	adds	r3, r7, #3
 8004762:	2201      	movs	r2, #1
 8004764:	4619      	mov	r1, r3
 8004766:	f7ff fed9 	bl	800451c <SEGGER_RTT_ReadNoLock>
 800476a:	4603      	mov	r3, r0
 800476c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	dd15      	ble.n	80047a0 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fec4 	bl	8005504 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800477c:	e010      	b.n	80047a0 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	b25b      	sxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	da0e      	bge.n	80047a4 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <_HandleIncomingPacket+0xd4>)
 8004788:	7e1b      	ldrb	r3, [r3, #24]
 800478a:	4618      	mov	r0, r3
 800478c:	1cfb      	adds	r3, r7, #3
 800478e:	2201      	movs	r2, #1
 8004790:	4619      	mov	r1, r3
 8004792:	f7ff fec3 	bl	800451c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004796:	e005      	b.n	80047a4 <_HandleIncomingPacket+0xc8>
    }
  }
 8004798:	bf00      	nop
 800479a:	e004      	b.n	80047a6 <_HandleIncomingPacket+0xca>
      break;
 800479c:	bf00      	nop
 800479e:	e002      	b.n	80047a6 <_HandleIncomingPacket+0xca>
      break;
 80047a0:	bf00      	nop
 80047a2:	e000      	b.n	80047a6 <_HandleIncomingPacket+0xca>
      break;
 80047a4:	bf00      	nop
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20013248 	.word	0x20013248

080047b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80047ba:	2301      	movs	r3, #1
 80047bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	e00b      	b.n	80047e8 <_TrySendOverflowPacket+0x34>
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b7f      	cmp	r3, #127	; 0x7f
 80047ec:	d8f0      	bhi.n	80047d0 <_TrySendOverflowPacket+0x1c>
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <_TrySendOverflowPacket+0xe0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	e00b      	b.n	8004830 <_TrySendOverflowPacket+0x7c>
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	6279      	str	r1, [r7, #36]	; 0x24
 8004822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	09db      	lsrs	r3, r3, #7
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b7f      	cmp	r3, #127	; 0x7f
 8004834:	d8f0      	bhi.n	8004818 <_TrySendOverflowPacket+0x64>
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	627a      	str	r2, [r7, #36]	; 0x24
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	4618      	mov	r0, r3
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	461a      	mov	r2, r3
 8004854:	1d3b      	adds	r3, r7, #4
 8004856:	4619      	mov	r1, r3
 8004858:	f7fb fcba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800485c:	4603      	mov	r3, r0
 800485e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e004      	b.n	8004884 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	4a03      	ldr	r2, [pc, #12]	; (8004890 <_TrySendOverflowPacket+0xdc>)
 8004882:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004884:	693b      	ldr	r3, [r7, #16]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3730      	adds	r7, #48	; 0x30
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20013248 	.word	0x20013248
 8004894:	e0001004 	.word	0xe0001004

08004898 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80048a4:	4b6c      	ldr	r3, [pc, #432]	; (8004a58 <_SendPacket+0x1c0>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d010      	beq.n	80048ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <_SendPacket+0x1c0>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a3 	beq.w	80049fc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80048b6:	4b68      	ldr	r3, [pc, #416]	; (8004a58 <_SendPacket+0x1c0>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d109      	bne.n	80048d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80048be:	f7ff ff79 	bl	80047b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80048c2:	4b65      	ldr	r3, [pc, #404]	; (8004a58 <_SendPacket+0x1c0>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	f040 809a 	bne.w	8004a00 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80048cc:	e001      	b.n	80048d2 <_SendPacket+0x3a>
    goto Send;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <_SendPacket+0x3c>
Send:
 80048d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b1f      	cmp	r3, #31
 80048d8:	d809      	bhi.n	80048ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80048da:	4b5f      	ldr	r3, [pc, #380]	; (8004a58 <_SendPacket+0x1c0>)
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 808b 	bne.w	8004a04 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b17      	cmp	r3, #23
 80048f2:	d807      	bhi.n	8004904 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e03d      	b.n	8004980 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b7f      	cmp	r3, #127	; 0x7f
 8004910:	d912      	bls.n	8004938 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	09da      	lsrs	r2, r3, #7
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b01      	subs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	3a01      	subs	r2, #1
 800492a:	60fa      	str	r2, [r7, #12]
 800492c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e006      	b.n	8004946 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b7f      	cmp	r3, #127	; 0x7f
 800494a:	d912      	bls.n	8004972 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	09da      	lsrs	r2, r3, #7
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	3a01      	subs	r2, #1
 8004964:	60fa      	str	r2, [r7, #12]
 8004966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e006      	b.n	8004980 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b01      	subs	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <_SendPacket+0x1c4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004986:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <_SendPacket+0x1c0>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e00b      	b.n	80049b2 <_SendPacket+0x11a>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	6279      	str	r1, [r7, #36]	; 0x24
 80049a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	09db      	lsrs	r3, r3, #7
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	2b7f      	cmp	r3, #127	; 0x7f
 80049b6:	d8f0      	bhi.n	800499a <_SendPacket+0x102>
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	627a      	str	r2, [r7, #36]	; 0x24
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <_SendPacket+0x1c0>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	4618      	mov	r0, r3
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	f7fb fbfa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80049dc:	4603      	mov	r3, r0
 80049de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <_SendPacket+0x1c0>)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	60d3      	str	r3, [r2, #12]
 80049ec:	e00b      	b.n	8004a06 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80049ee:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <_SendPacket+0x1c0>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <_SendPacket+0x1c0>)
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e004      	b.n	8004a06 <_SendPacket+0x16e>
    goto SendDone;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <_SendPacket+0x16e>
      goto SendDone;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <_SendPacket+0x16e>
      goto SendDone;
 8004a04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <_SendPacket+0x1c0>)
 8004a08:	7e1b      	ldrb	r3, [r3, #24]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <_SendPacket+0x1c8>)
 8004a0e:	460b      	mov	r3, r1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	440b      	add	r3, r1
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	336c      	adds	r3, #108	; 0x6c
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <_SendPacket+0x1c0>)
 8004a1e:	7e1b      	ldrb	r3, [r3, #24]
 8004a20:	4618      	mov	r0, r3
 8004a22:	490f      	ldr	r1, [pc, #60]	; (8004a60 <_SendPacket+0x1c8>)
 8004a24:	4603      	mov	r3, r0
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4403      	add	r3, r0
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3370      	adds	r3, #112	; 0x70
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d00b      	beq.n	8004a4e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <_SendPacket+0x1c0>)
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <_SendPacket+0x1c0>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a44:	f7ff fe4a 	bl	80046dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <_SendPacket+0x1c0>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a4e:	bf00      	nop
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20013248 	.word	0x20013248
 8004a5c:	e0001004 	.word	0xe0001004
 8004a60:	200133e0 	.word	0x200133e0

08004a64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a70:	f04f 0120 	mov.w	r1, #32
 8004a74:	f381 8811 	msr	BASEPRI, r1
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4808      	ldr	r0, [pc, #32]	; (8004a9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a7c:	f7ff fe21 	bl	80046c2 <_PreparePacket>
 8004a80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68b8      	ldr	r0, [r7, #8]
 8004a88:	f7ff ff06 	bl	8004898 <_SendPacket>
  RECORD_END();
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f383 8811 	msr	BASEPRI, r3
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20013278 	.word	0x20013278

08004aa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004aae:	f04f 0120 	mov.w	r1, #32
 8004ab2:	f381 8811 	msr	BASEPRI, r1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	4816      	ldr	r0, [pc, #88]	; (8004b14 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004aba:	f7ff fe02 	bl	80046c2 <_PreparePacket>
 8004abe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	e00b      	b.n	8004ae6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	1c59      	adds	r1, r3, #1
 8004ad6:	61f9      	str	r1, [r7, #28]
 8004ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	09db      	lsrs	r3, r3, #7
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aea:	d8f0      	bhi.n	8004ace <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	6938      	ldr	r0, [r7, #16]
 8004b02:	f7ff fec9 	bl	8004898 <_SendPacket>
  RECORD_END();
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f383 8811 	msr	BASEPRI, r3
}
 8004b0c:	bf00      	nop
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20013278 	.word	0x20013278

08004b18 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	; 0x30
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b24:	f3ef 8311 	mrs	r3, BASEPRI
 8004b28:	f04f 0120 	mov.w	r1, #32
 8004b2c:	f381 8811 	msr	BASEPRI, r1
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	4825      	ldr	r0, [pc, #148]	; (8004bc8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b34:	f7ff fdc5 	bl	80046c2 <_PreparePacket>
 8004b38:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	e00b      	b.n	8004b60 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	09db      	lsrs	r3, r3, #7
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d8f0      	bhi.n	8004b48 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	6279      	str	r1, [r7, #36]	; 0x24
 8004b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	623b      	str	r3, [r7, #32]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69b8      	ldr	r0, [r7, #24]
 8004bb4:	f7ff fe70 	bl	8004898 <_SendPacket>
  RECORD_END();
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
 8004bc0:	3730      	adds	r7, #48	; 0x30
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20013278 	.word	0x20013278

08004bcc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	; 0x38
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bda:	f3ef 8311 	mrs	r3, BASEPRI
 8004bde:	f04f 0120 	mov.w	r1, #32
 8004be2:	f381 8811 	msr	BASEPRI, r1
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	4832      	ldr	r0, [pc, #200]	; (8004cb4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004bea:	f7ff fd6a 	bl	80046c2 <_PreparePacket>
 8004bee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfc:	e00b      	b.n	8004c16 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	1c59      	adds	r1, r3, #1
 8004c06:	6379      	str	r1, [r7, #52]	; 0x34
 8004c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	09db      	lsrs	r3, r3, #7
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1a:	d8f0      	bhi.n	8004bfe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	637a      	str	r2, [r7, #52]	; 0x34
 8004c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c34:	e00b      	b.n	8004c4e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	1c59      	adds	r1, r3, #1
 8004c3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	09db      	lsrs	r3, r3, #7
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	2b7f      	cmp	r3, #127	; 0x7f
 8004c52:	d8f0      	bhi.n	8004c36 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	e00b      	b.n	8004c86 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1c59      	adds	r1, r3, #1
 8004c76:	6279      	str	r1, [r7, #36]	; 0x24
 8004c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	09db      	lsrs	r3, r3, #7
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	2b7f      	cmp	r3, #127	; 0x7f
 8004c8a:	d8f0      	bhi.n	8004c6e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	627a      	str	r2, [r7, #36]	; 0x24
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	69b8      	ldr	r0, [r7, #24]
 8004ca2:	f7ff fdf9 	bl	8004898 <_SendPacket>
  RECORD_END();
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f383 8811 	msr	BASEPRI, r3
}
 8004cac:	bf00      	nop
 8004cae:	3738      	adds	r7, #56	; 0x38
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20013278 	.word	0x20013278

08004cb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b090      	sub	sp, #64	; 0x40
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cca:	f04f 0120 	mov.w	r1, #32
 8004cce:	f381 8811 	msr	BASEPRI, r1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	4840      	ldr	r0, [pc, #256]	; (8004dd8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004cd6:	f7ff fcf4 	bl	80046c2 <_PreparePacket>
 8004cda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce8:	e00b      	b.n	8004d02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf0:	1c59      	adds	r1, r3, #1
 8004cf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b7f      	cmp	r3, #127	; 0x7f
 8004d06:	d8f0      	bhi.n	8004cea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d20:	e00b      	b.n	8004d3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	6379      	str	r1, [r7, #52]	; 0x34
 8004d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	09db      	lsrs	r3, r3, #7
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3e:	d8f0      	bhi.n	8004d22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	637a      	str	r2, [r7, #52]	; 0x34
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d58:	e00b      	b.n	8004d72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	1c59      	adds	r1, r3, #1
 8004d62:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	09db      	lsrs	r3, r3, #7
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	2b7f      	cmp	r3, #127	; 0x7f
 8004d76:	d8f0      	bhi.n	8004d5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	623b      	str	r3, [r7, #32]
 8004d90:	e00b      	b.n	8004daa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	1c59      	adds	r1, r3, #1
 8004d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8004d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	09db      	lsrs	r3, r3, #7
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b7f      	cmp	r3, #127	; 0x7f
 8004dae:	d8f0      	bhi.n	8004d92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	627a      	str	r2, [r7, #36]	; 0x24
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	69b8      	ldr	r0, [r7, #24]
 8004dc6:	f7ff fd67 	bl	8004898 <_SendPacket>
  RECORD_END();
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
}
 8004dd0:	bf00      	nop
 8004dd2:	3740      	adds	r7, #64	; 0x40
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20013278 	.word	0x20013278

08004ddc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004de2:	4b58      	ldr	r3, [pc, #352]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004de8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dec:	f04f 0120 	mov.w	r1, #32
 8004df0:	f381 8811 	msr	BASEPRI, r1
 8004df4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004df6:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	220a      	movs	r2, #10
 8004dfc:	4952      	ldr	r1, [pc, #328]	; (8004f48 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb f9e6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e0a:	200a      	movs	r0, #10
 8004e0c:	f7ff fe2a 	bl	8004a64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e10:	f3ef 8311 	mrs	r3, BASEPRI
 8004e14:	f04f 0120 	mov.w	r1, #32
 8004e18:	f381 8811 	msr	BASEPRI, r1
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	484b      	ldr	r0, [pc, #300]	; (8004f4c <SEGGER_SYSVIEW_Start+0x170>)
 8004e20:	f7ff fc4f 	bl	80046c2 <_PreparePacket>
 8004e24:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	4b45      	ldr	r3, [pc, #276]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e34:	e00b      	b.n	8004e4e <SEGGER_SYSVIEW_Start+0x72>
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2b7f      	cmp	r3, #127	; 0x7f
 8004e52:	d8f0      	bhi.n	8004e36 <SEGGER_SYSVIEW_Start+0x5a>
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	623b      	str	r3, [r7, #32]
 8004e6e:	e00b      	b.n	8004e88 <SEGGER_SYSVIEW_Start+0xac>
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1c59      	adds	r1, r3, #1
 8004e78:	6279      	str	r1, [r7, #36]	; 0x24
 8004e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	09db      	lsrs	r3, r3, #7
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8c:	d8f0      	bhi.n	8004e70 <SEGGER_SYSVIEW_Start+0x94>
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	627a      	str	r2, [r7, #36]	; 0x24
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e00b      	b.n	8004ec2 <SEGGER_SYSVIEW_Start+0xe6>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	61f9      	str	r1, [r7, #28]
 8004eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec6:	d8f0      	bhi.n	8004eaa <SEGGER_SYSVIEW_Start+0xce>
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	61fa      	str	r2, [r7, #28]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e00b      	b.n	8004efa <SEGGER_SYSVIEW_Start+0x11e>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	6179      	str	r1, [r7, #20]
 8004eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b7f      	cmp	r3, #127	; 0x7f
 8004efe:	d8f0      	bhi.n	8004ee2 <SEGGER_SYSVIEW_Start+0x106>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	617a      	str	r2, [r7, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f10:	2218      	movs	r2, #24
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff fcbf 	bl	8004898 <_SendPacket>
      RECORD_END();
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <SEGGER_SYSVIEW_Start+0x168>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f2e:	f000 f9c7 	bl	80052c0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f32:	f000 f9b1 	bl	8005298 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f36:	f000 fb83 	bl	8005640 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f3a:	bf00      	nop
 8004f3c:	3730      	adds	r7, #48	; 0x30
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20013248 	.word	0x20013248
 8004f48:	080058e8 	.word	0x080058e8
 8004f4c:	20013278 	.word	0x20013278

08004f50 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f56:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5a:	f04f 0120 	mov.w	r1, #32
 8004f5e:	f381 8811 	msr	BASEPRI, r1
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	480b      	ldr	r0, [pc, #44]	; (8004f94 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f66:	f7ff fbac 	bl	80046c2 <_PreparePacket>
 8004f6a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f74:	220b      	movs	r2, #11
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f7ff fc8d 	bl	8004898 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f383 8811 	msr	BASEPRI, r3
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20013278 	.word	0x20013278
 8004f98:	20013248 	.word	0x20013248

08004f9c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa6:	f04f 0120 	mov.w	r1, #32
 8004faa:	f381 8811 	msr	BASEPRI, r1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	4845      	ldr	r0, [pc, #276]	; (80050c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004fb2:	f7ff fb86 	bl	80046c2 <_PreparePacket>
 8004fb6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	4b42      	ldr	r3, [pc, #264]	; (80050cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc6:	e00b      	b.n	8004fe0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	09db      	lsrs	r3, r3, #7
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe4:	d8f0      	bhi.n	8004fc8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	623b      	str	r3, [r7, #32]
 8005000:	e00b      	b.n	800501a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	6279      	str	r1, [r7, #36]	; 0x24
 800500c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2b7f      	cmp	r3, #127	; 0x7f
 800501e:	d8f0      	bhi.n	8005002 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	627a      	str	r2, [r7, #36]	; 0x24
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e00b      	b.n	8005054 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	61f9      	str	r1, [r7, #28]
 8005046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	09db      	lsrs	r3, r3, #7
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b7f      	cmp	r3, #127	; 0x7f
 8005058:	d8f0      	bhi.n	800503c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	61fa      	str	r2, [r7, #28]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e00b      	b.n	800508c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	6179      	str	r1, [r7, #20]
 800507e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	09db      	lsrs	r3, r3, #7
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b7f      	cmp	r3, #127	; 0x7f
 8005090:	d8f0      	bhi.n	8005074 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	617a      	str	r2, [r7, #20]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050a2:	2218      	movs	r2, #24
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f7ff fbf6 	bl	8004898 <_SendPacket>
  RECORD_END();
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	4798      	blx	r3
  }
}
 80050c0:	bf00      	nop
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20013278 	.word	0x20013278
 80050cc:	20013248 	.word	0x20013248

080050d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b092      	sub	sp, #72	; 0x48
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80050d8:	f3ef 8311 	mrs	r3, BASEPRI
 80050dc:	f04f 0120 	mov.w	r1, #32
 80050e0:	f381 8811 	msr	BASEPRI, r1
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	486a      	ldr	r0, [pc, #424]	; (8005290 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80050e8:	f7ff faeb 	bl	80046c2 <_PreparePacket>
 80050ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	647b      	str	r3, [r7, #68]	; 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b66      	ldr	r3, [pc, #408]	; (8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	643b      	str	r3, [r7, #64]	; 0x40
 8005102:	e00b      	b.n	800511c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005106:	b2da      	uxtb	r2, r3
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	1c59      	adds	r1, r3, #1
 800510c:	6479      	str	r1, [r7, #68]	; 0x44
 800510e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005118:	09db      	lsrs	r3, r3, #7
 800511a:	643b      	str	r3, [r7, #64]	; 0x40
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	2b7f      	cmp	r3, #127	; 0x7f
 8005120:	d8f0      	bhi.n	8005104 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	647a      	str	r2, [r7, #68]	; 0x44
 8005128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	63bb      	str	r3, [r7, #56]	; 0x38
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	4619      	mov	r1, r3
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fa57 	bl	8004628 <_EncodeStr>
 800517a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800517c:	2209      	movs	r2, #9
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	6938      	ldr	r0, [r7, #16]
 8005182:	f7ff fb89 	bl	8004898 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b40      	ldr	r3, [pc, #256]	; (8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	e00b      	b.n	80051b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	1c59      	adds	r1, r3, #1
 80051a4:	6379      	str	r1, [r7, #52]	; 0x34
 80051a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	09db      	lsrs	r3, r3, #7
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2b7f      	cmp	r3, #127	; 0x7f
 80051b8:	d8f0      	bhi.n	800519c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80051ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	637a      	str	r2, [r7, #52]	; 0x34
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d4:	e00b      	b.n	80051ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	2b7f      	cmp	r3, #127	; 0x7f
 80051f2:	d8f0      	bhi.n	80051d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	e00b      	b.n	8005228 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6279      	str	r1, [r7, #36]	; 0x24
 800521a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	09db      	lsrs	r3, r3, #7
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b7f      	cmp	r3, #127	; 0x7f
 800522c:	d8f0      	bhi.n	8005210 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	627a      	str	r2, [r7, #36]	; 0x24
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e00b      	b.n	8005260 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	61f9      	str	r1, [r7, #28]
 8005252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b7f      	cmp	r3, #127	; 0x7f
 8005264:	d8f0      	bhi.n	8005248 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	61fa      	str	r2, [r7, #28]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005276:	2215      	movs	r2, #21
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f7ff fb0c 	bl	8004898 <_SendPacket>
  RECORD_END();
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f383 8811 	msr	BASEPRI, r3
}
 8005286:	bf00      	nop
 8005288:	3748      	adds	r7, #72	; 0x48
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20013278 	.word	0x20013278
 8005294:	20013248 	.word	0x20013248

08005298 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800529c:	4b07      	ldr	r3, [pc, #28]	; (80052bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052ae:	4b03      	ldr	r3, [pc, #12]	; (80052bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4798      	blx	r3
  }
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20013248 	.word	0x20013248

080052c0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d019      	beq.n	8005302 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d014      	beq.n	8005302 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4798      	blx	r3
 80052e0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052e4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	0013      	movs	r3, r2
 80052f4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052f6:	461a      	mov	r2, r3
 80052f8:	4601      	mov	r1, r0
 80052fa:	200d      	movs	r0, #13
 80052fc:	f7ff fc0c 	bl	8004b18 <SEGGER_SYSVIEW_RecordU32x2>
 8005300:	e005      	b.n	800530e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4619      	mov	r1, r3
 8005308:	200c      	movs	r0, #12
 800530a:	f7ff fbc9 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}
 8005316:	bf00      	nop
 8005318:	20013248 	.word	0x20013248
 800531c:	e0001004 	.word	0xe0001004

08005320 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005326:	f3ef 8311 	mrs	r3, BASEPRI
 800532a:	f04f 0120 	mov.w	r1, #32
 800532e:	f381 8811 	msr	BASEPRI, r1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	4807      	ldr	r0, [pc, #28]	; (8005354 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005336:	f7ff f9c4 	bl	80046c2 <_PreparePacket>
 800533a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800533c:	2211      	movs	r2, #17
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6838      	ldr	r0, [r7, #0]
 8005342:	f7ff faa9 	bl	8004898 <_SendPacket>
  RECORD_END();
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f383 8811 	msr	BASEPRI, r3
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20013278 	.word	0x20013278

08005358 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005360:	f3ef 8311 	mrs	r3, BASEPRI
 8005364:	f04f 0120 	mov.w	r1, #32
 8005368:	f381 8811 	msr	BASEPRI, r1
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	4819      	ldr	r0, [pc, #100]	; (80053d4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005370:	f7ff f9a7 	bl	80046c2 <_PreparePacket>
 8005374:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e00b      	b.n	80053a6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	61f9      	str	r1, [r7, #28]
 8005398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	09db      	lsrs	r3, r3, #7
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b7f      	cmp	r3, #127	; 0x7f
 80053aa:	d8f0      	bhi.n	800538e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80053bc:	2208      	movs	r2, #8
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	6938      	ldr	r0, [r7, #16]
 80053c2:	f7ff fa69 	bl	8004898 <_SendPacket>
  RECORD_END();
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f383 8811 	msr	BASEPRI, r3
}
 80053cc:	bf00      	nop
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20013278 	.word	0x20013278
 80053d8:	20013248 	.word	0x20013248

080053dc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053e4:	f3ef 8311 	mrs	r3, BASEPRI
 80053e8:	f04f 0120 	mov.w	r1, #32
 80053ec:	f381 8811 	msr	BASEPRI, r1
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	4819      	ldr	r0, [pc, #100]	; (8005458 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80053f4:	f7ff f965 	bl	80046c2 <_PreparePacket>
 80053f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053fe:	4b17      	ldr	r3, [pc, #92]	; (800545c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e00b      	b.n	800542a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	1c59      	adds	r1, r3, #1
 800541a:	61f9      	str	r1, [r7, #28]
 800541c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	09db      	lsrs	r3, r3, #7
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b7f      	cmp	r3, #127	; 0x7f
 800542e:	d8f0      	bhi.n	8005412 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005440:	2204      	movs	r2, #4
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	6938      	ldr	r0, [r7, #16]
 8005446:	f7ff fa27 	bl	8004898 <_SendPacket>
  RECORD_END();
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f383 8811 	msr	BASEPRI, r3
}
 8005450:	bf00      	nop
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20013278 	.word	0x20013278
 800545c:	20013248 	.word	0x20013248

08005460 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005468:	f3ef 8311 	mrs	r3, BASEPRI
 800546c:	f04f 0120 	mov.w	r1, #32
 8005470:	f381 8811 	msr	BASEPRI, r1
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	4819      	ldr	r0, [pc, #100]	; (80054dc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005478:	f7ff f923 	bl	80046c2 <_PreparePacket>
 800547c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005482:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e00b      	b.n	80054ae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	61f9      	str	r1, [r7, #28]
 80054a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	09db      	lsrs	r3, r3, #7
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b7f      	cmp	r3, #127	; 0x7f
 80054b2:	d8f0      	bhi.n	8005496 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	61fa      	str	r2, [r7, #28]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80054c4:	2206      	movs	r2, #6
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	6938      	ldr	r0, [r7, #16]
 80054ca:	f7ff f9e5 	bl	8004898 <_SendPacket>
  RECORD_END();
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f383 8811 	msr	BASEPRI, r3
}
 80054d4:	bf00      	nop
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20013278 	.word	0x20013278
 80054e0:	20013248 	.word	0x20013248

080054e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	1ad3      	subs	r3, r2, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	20013248 	.word	0x20013248

08005504 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d06d      	beq.n	80055f2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800551c:	2300      	movs	r3, #0
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005520:	e008      	b.n	8005534 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	3301      	adds	r3, #1
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	429a      	cmp	r2, r3
 800553a:	d3f2      	bcc.n	8005522 <SEGGER_SYSVIEW_SendModule+0x1e>
 800553c:	e000      	b.n	8005540 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800553e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d055      	beq.n	80055f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005546:	f3ef 8311 	mrs	r3, BASEPRI
 800554a:	f04f 0120 	mov.w	r1, #32
 800554e:	f381 8811 	msr	BASEPRI, r1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	482a      	ldr	r0, [pc, #168]	; (8005600 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005556:	f7ff f8b4 	bl	80046c2 <_PreparePacket>
 800555a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	e00b      	b.n	8005582 <SEGGER_SYSVIEW_SendModule+0x7e>
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	1c59      	adds	r1, r3, #1
 8005572:	6279      	str	r1, [r7, #36]	; 0x24
 8005574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	09db      	lsrs	r3, r3, #7
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	2b7f      	cmp	r3, #127	; 0x7f
 8005586:	d8f0      	bhi.n	800556a <SEGGER_SYSVIEW_SendModule+0x66>
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	627a      	str	r2, [r7, #36]	; 0x24
 800558e:	6a3a      	ldr	r2, [r7, #32]
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	61f9      	str	r1, [r7, #28]
 80055ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff f824 	bl	8004628 <_EncodeStr>
 80055e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80055e2:	2216      	movs	r2, #22
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	6938      	ldr	r0, [r7, #16]
 80055e8:	f7ff f956 	bl	8004898 <_SendPacket>
      RECORD_END();
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80055f2:	bf00      	nop
 80055f4:	3730      	adds	r7, #48	; 0x30
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20013270 	.word	0x20013270
 8005600:	20013278 	.word	0x20013278

08005604 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00f      	beq.n	8005632 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f2      	bne.n	8005618 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20013270 	.word	0x20013270

08005640 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005646:	f3ef 8311 	mrs	r3, BASEPRI
 800564a:	f04f 0120 	mov.w	r1, #32
 800564e:	f381 8811 	msr	BASEPRI, r1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	4817      	ldr	r0, [pc, #92]	; (80056b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005656:	f7ff f834 	bl	80046c2 <_PreparePacket>
 800565a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e00b      	b.n	8005684 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	6179      	str	r1, [r7, #20]
 8005676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	09db      	lsrs	r3, r3, #7
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b7f      	cmp	r3, #127	; 0x7f
 8005688:	d8f0      	bhi.n	800566c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	617a      	str	r2, [r7, #20]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800569a:	221b      	movs	r2, #27
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	68b8      	ldr	r0, [r7, #8]
 80056a0:	f7ff f8fa 	bl	8004898 <_SendPacket>
  RECORD_END();
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f383 8811 	msr	BASEPRI, r3
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20013278 	.word	0x20013278
 80056b8:	20013274 	.word	0x20013274

080056bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056c4:	f3ef 8311 	mrs	r3, BASEPRI
 80056c8:	f04f 0120 	mov.w	r1, #32
 80056cc:	f381 8811 	msr	BASEPRI, r1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	4827      	ldr	r0, [pc, #156]	; (8005770 <SEGGER_SYSVIEW_Warn+0xb4>)
 80056d4:	f7fe fff5 	bl	80046c2 <_PreparePacket>
 80056d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f7fe ffa2 	bl	8004628 <_EncodeStr>
 80056e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	2301      	movs	r3, #1
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e00b      	b.n	8005708 <SEGGER_SYSVIEW_Warn+0x4c>
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6279      	str	r1, [r7, #36]	; 0x24
 80056fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	09db      	lsrs	r3, r3, #7
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b7f      	cmp	r3, #127	; 0x7f
 800570c:	d8f0      	bhi.n	80056f0 <SEGGER_SYSVIEW_Warn+0x34>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	627a      	str	r2, [r7, #36]	; 0x24
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e00b      	b.n	8005740 <SEGGER_SYSVIEW_Warn+0x84>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	1c59      	adds	r1, r3, #1
 8005730:	61f9      	str	r1, [r7, #28]
 8005732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	09db      	lsrs	r3, r3, #7
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b7f      	cmp	r3, #127	; 0x7f
 8005744:	d8f0      	bhi.n	8005728 <SEGGER_SYSVIEW_Warn+0x6c>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	61fa      	str	r2, [r7, #28]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005756:	221a      	movs	r2, #26
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	6938      	ldr	r0, [r7, #16]
 800575c:	f7ff f89c 	bl	8004898 <_SendPacket>
  RECORD_END();
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f383 8811 	msr	BASEPRI, r3
}
 8005766:	bf00      	nop
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20013278 	.word	0x20013278

08005774 <__libc_init_array>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4e0d      	ldr	r6, [pc, #52]	; (80057ac <__libc_init_array+0x38>)
 8005778:	4c0d      	ldr	r4, [pc, #52]	; (80057b0 <__libc_init_array+0x3c>)
 800577a:	1ba4      	subs	r4, r4, r6
 800577c:	10a4      	asrs	r4, r4, #2
 800577e:	2500      	movs	r5, #0
 8005780:	42a5      	cmp	r5, r4
 8005782:	d109      	bne.n	8005798 <__libc_init_array+0x24>
 8005784:	4e0b      	ldr	r6, [pc, #44]	; (80057b4 <__libc_init_array+0x40>)
 8005786:	4c0c      	ldr	r4, [pc, #48]	; (80057b8 <__libc_init_array+0x44>)
 8005788:	f000 f83a 	bl	8005800 <_init>
 800578c:	1ba4      	subs	r4, r4, r6
 800578e:	10a4      	asrs	r4, r4, #2
 8005790:	2500      	movs	r5, #0
 8005792:	42a5      	cmp	r5, r4
 8005794:	d105      	bne.n	80057a2 <__libc_init_array+0x2e>
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800579c:	4798      	blx	r3
 800579e:	3501      	adds	r5, #1
 80057a0:	e7ee      	b.n	8005780 <__libc_init_array+0xc>
 80057a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057a6:	4798      	blx	r3
 80057a8:	3501      	adds	r5, #1
 80057aa:	e7f2      	b.n	8005792 <__libc_init_array+0x1e>
 80057ac:	080058fc 	.word	0x080058fc
 80057b0:	080058fc 	.word	0x080058fc
 80057b4:	080058fc 	.word	0x080058fc
 80057b8:	08005900 	.word	0x08005900

080057bc <memcmp>:
 80057bc:	b530      	push	{r4, r5, lr}
 80057be:	2400      	movs	r4, #0
 80057c0:	42a2      	cmp	r2, r4
 80057c2:	d101      	bne.n	80057c8 <memcmp+0xc>
 80057c4:	2000      	movs	r0, #0
 80057c6:	e007      	b.n	80057d8 <memcmp+0x1c>
 80057c8:	5d03      	ldrb	r3, [r0, r4]
 80057ca:	3401      	adds	r4, #1
 80057cc:	190d      	adds	r5, r1, r4
 80057ce:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	d0f4      	beq.n	80057c0 <memcmp+0x4>
 80057d6:	1b58      	subs	r0, r3, r5
 80057d8:	bd30      	pop	{r4, r5, pc}

080057da <memcpy>:
 80057da:	b510      	push	{r4, lr}
 80057dc:	1e43      	subs	r3, r0, #1
 80057de:	440a      	add	r2, r1
 80057e0:	4291      	cmp	r1, r2
 80057e2:	d100      	bne.n	80057e6 <memcpy+0xc>
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ee:	e7f7      	b.n	80057e0 <memcpy+0x6>

080057f0 <memset>:
 80057f0:	4402      	add	r2, r0
 80057f2:	4603      	mov	r3, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d100      	bne.n	80057fa <memset+0xa>
 80057f8:	4770      	bx	lr
 80057fa:	f803 1b01 	strb.w	r1, [r3], #1
 80057fe:	e7f9      	b.n	80057f4 <memset+0x4>

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
